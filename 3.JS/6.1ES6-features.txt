Q1. What are the ES6 Features:
1. let and const variables
2. Arrow functions
3. Classes
4. Promise
5. Spread operator 
6. Destructuring Assignment
7. Multi-line Strings 
8. Template Literals
9. Default Parameters
10.Modules 
**************************************************
Q2. What is arrow function?
1. Arrow Function

- Its ES6 feature that provides a more concise syntax for writing function expressions by removing out the "function" and "return" keywords.
- Arrow functions are defined using the fat arrow (=>) notation.

e.g.
let sumOfTwoNumbers = (a, b) => a + b;
console.log(sum(10, 20));  // Output 30

- We can also skip the parenthesis in the case when there is exactly one parameter, 
  but will always need to use it when you have zero or more than one parameter.
- If there are multiple expressions in the function body, then we need to wrap it with curly braces ("{}"). We also need to use the "return" statement to return the required value.

Differences and limitations:
- Does not have its own bindings to this or super, and should not be used as methods.
- Not suitable for call, apply and bind methods, which generally rely on establishing a scope.
- Can not be used as constructors.

- Can not use yield, within its body.
- Does not have new.target keyword.

---------------------------------------------------------------------------------------------------
Q3.Default paramater

In ES6, users can provide the default values right in the signature of the functions. But, in ES5, OR operator had to be used.

//ES6
let calculateArea = function(height = 100, width = 50) {  
    // logic
}

//ES5
var calculateArea = function(height, width) {  
   height =  height || 50;
   width = width || 80;
   // logic
}
---------------------------------------------------------------------------------------------------
Q4. What is Template Literals in JS?

ES6 introduces very simple string templates along with placeholders for the variables. 
The syntax for using the string template is ${PARAMETER} and is used inside of the back-ticked string.

let name = `My name is ${firstName} ${lastName}`
---------------------------------------------------------------------------------------------------
Q5. What is spread operator? Uses?
Object, Array destructuring
Rest parameters
Shallow copying of object.

Note: see seperate file for details
---------------------------------------------------------------------------------------------------
Q6. Rest parameter
With the help of a rest parameter a function can be called with any number of arguments, no matter how it was defined. 
function fun(...input){
    let sum = 0;
    for(let i of input){
        sum+=i;
    }
    return sum;
}
console.log(fun(1,2)); // 3
console.log(fun(1,2,3)); // 6 
console.log(fun(1,2,3,4,5)); // 15
---------------------------------------------------------------------------------------------------
Q8. Destructuring
Destructuring extract arrray elements and object properties and store them in a variable.
Array destructuring
[a,b] = ['john','max'];
console.log(a); // john
console.log(b);  // max
---------------------------------------------------------------------------------------------------


