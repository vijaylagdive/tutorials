Types of scopes in js?
1.Block scope
2.Functional scope
3.Global scope
------

- variable without var or let becomes global.


----------------------------------------------------------------
Q3 this in JS?
Ans: Special variable that is created for every execution context(every function).
Takes the value of or points to the owner of the function in which this keyword is used.

this is not static. It depends on how the function is called, and its value is only assigned 
when the function is actually called.

Object method: Object that is calling the method

Simple function call: this : undefined(in strict mode otherwise global or window in the browser)

Arrow function: this of surrounding function (lexical this)

Event listener: DOM element that the handler is attached to.

new call apply bind 
----------------------------------------------------------------
Q4. hoisting in JS
Ans:
JavaScript Hoisting refers to the process in which the js interpreter moves the declaration of functions, 
variables to the top of their scope, prior to execution of the code.

ex1.
function hoisting
catName("Tiger");
function catName(name) {
  console.log("My cat's name is " + name);
}

ex2.
Variable hoisting
console.log(num); // Returns 'undefined' from hoisted var declaration (not 6)
var num; // Declaration
num = 6; // Initialization
console.log(num); // Returns 6 after the line with initialization is executed.

console.log(a); //undefined
var a = 6;

console.log(b); //reference error
let b = 6;

hoisting of var decalred variable is allowed. But not allowed for let declared variable.
----------------------------------------------------------------
Q5 IIFE??
Ans:
An IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined. 
It is a design pattern which is also known as a Self-Executing Anonymous Function and contains two major parts:
1. The first is the anonymous function with lexical scope enclosed within the Grouping Operator (). 
This prevents accessing variables within the IIFE idiom as well as polluting the global scope.

2. The second part creates the immediately invoked function expression () through which the JavaScript engine will directly interpret the function.

(function () {
  /* ... */
})();

(() => {
  /* ... */
})();

----------------------------------------------------------------
Q6. What is callback function?
Ans:
A callback is a function passed as an argument to another function
This technique allows a function to call another function.
A callback function can run after another function has finished

ex:
function myCalculator(num1, num2, myCallback) {
  let sum = num1 + num2;
  myCallback(sum);
}

function myDisplayer(some) {
  document.getElementById("demo").innerHTML = some;
}
myCalculator(5, 5, myDisplayer);

another examples are setTimeout, setTimeInterval
----------------------------------------------------------------
Q7. What is Higher Order Fucntion? HOF?
Ans:
In Javascript, functions can be assigned to variables in the same way that strings or arrays can. 
They can be passed into other functions as parameters or returned from them as well.
A “higher-order function” is a function that accepts functions as parameters and/or returns a function.
----------------------------------------------------------------
Q8. What is Pure function?
Ans:
A Pure Function is a function (a block of code) that always returns the same result if the same arguments are passed. 
It does not depend on any state or data change during a program’s execution. Rather, it only depends on its input arguments.
Example:
function operationAdd(a, b){ // A pure function adding two integers passed in it.
    return a+b;
}
operationAdd(2,5),


Impure:
In the below code, the result the function is returning is dependent on the variable that is not declared inside the function, 
that's why this is an impure function.
const message = 'Hi there! ';
 function myMessage(value) {
     return `${message} ${value}`
 }
 console.log(myMessage('Mudit'));


Why Use Pure Functions in Javascript?
1. Better Readability
Pure functions increase the readability of the javascript code because of its simplicity. A pure function always generates a consistent result and it does not mutate any non-local state. All these features of a pure function make it easier to read and understand the code.

2. Testable
It's easier to perform unit testing on a pure function than on an impure function. A pure function result only depends upon its input arguments hence the whole function can be treated as an independent entity. So we can just take that function and test it with some standard input values whose output is known. And we can compare the output we get from the pure function with the expected output to perform the testing.

3. Better Performance
Pure functions can be memoized and this makes your application faster. Memoization is an optimization technique that makes your code more efficient and hence quicker. In memorization, the computational result is stored in the cache once and can be retrieved later when it is needed again instead of computing it again.
--------------------------------------------------------------------------------------------------------------------------------
Q9. Function declaration vs function expression?
Ans:
The main difference between a function expression and a function declaration is the function name, which can be omitted in function expressions to create anonymous functions.

A function expression can be used as an IIFE (Immediately Invoked Function Expression) which runs as soon as it is defined.

--------------------------------------------------------------------------------------------------------------------------------
Q10. What is call stack?
Ans:
The call stack is used by JavaScript to keep track of multiple function calls. 
It is like a real stack in data structures where data can be pushed and popped and follows the Last In First Out (LIFO) principle.
--------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------------



--------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------------
Q15. what is call(), apply(), bind()?
Ans: 
call()
- Its a predefined JS method and its a concept of function borrowing from other object.
- It can be used to invoke or call a function with an owner object as an argument with other arguments provided individually.
- The call() allows for a function/method belonging to one object to be assigned and called for a different object.
- Call method accepts object as first arguments and another needed argument.


Example 1:
function printFulName() {
    console.log(this.fname+' '+this.lname);
}

let name = {
    fname: 'Vijay',
    lname: 'Kumar'
}

let secondName = {
    fname: 'Amit',
    lname: 'Patil'
}

printFulName.call(name);
printFulName.call(secondName);

o/p
Vijay Kumar
demoooo.html:21 Amit Patil
------------------------
Example 2:
let fName = 'Amit';
let lName = 'Patil'

function printName() {
  console.log(this.fName, this.lName);
}

printName();// Amit Patil/ variables from window object.
printName.call({fName : 'vijay', lName : 'Kumar'}); // Vijay Kumar/ variables from passed object.

-------------------------------------------------

apply()
- The apply() method, calls a function with a given this vallue, and arguments provided as an array.
- The apply() method is similar to the call() method.
- The only difference is the call() method takes arguments separately and the apply() method takes arguments as an array.

Example:
1)
function printFulName(city,state) {
    console.log(this.fname+' '+this.lname+' '+city+' '+state);
}

let name = {
    fname: 'Vijay',
    lname: 'Kumar'
}

printFulName.apply(name,['pune','MH']);

2)
const numbers = [5, 6, 2, 3, 7];
let min = Math.min.apply(null, numbers);


Example for call and apply

var pokemon = {
    firstname: 'Pika',
    lastname: 'Chu ',
    getPokeName: function() {
        var fullname = this.firstname + ' ' + this.lastname;
        return fullname;
    }
};

var pokemonName = function(snack, hobby) {
    console.log(this.getPokeName() + ' loves ' + snack + ' and ' + hobby);
};

pokemonName.call(pokemon,'sushi', 'algorithms'); // Pika Chu  loves sushi and algorithms
pokemonName.apply(pokemon,['sushi', 'algorithms']); // Pika Chu  loves sushi and algorithms

-------------------------------------------------

bind() 
- Returns a bound function that which can be executed later.
- So bind() is basically used to bind and keep copy of that method and use it later.

The bind() method creates a new function that, when called, has its this keyword set to the provided value. 

It let’s us explicitly define the value of this when calling a function.

let name = {
    fname: 'Vijay',
    lname: 'Kumar'
}
function printFulName(city,state) {
    console.log(this.fname+' '+this.lname+' '+city+' '+state);
}
let printMyName = printFulName.bind(name,'pune','mh');
printMyName();


ex2

var pokemon = {
    firstname: 'Pika',
    lastname: 'Chu ',
    getPokeName: function() {
        var fullname = this.firstname + ' ' + this.lastname;
        return fullname;
    }
};

var pokemonName = function() {
    console.log(this.getPokeName() + 'I choose you!');
};

var logPokemon = pokemonName.bind(pokemon); // creates new object and binds pokemon. 'this' of pokemon === pokemon now

logPokemon(); // 'Pika Chu I choose you!'

---------------------------------------------------------------------------------------------------
Q15a. When and why to use call apply bind?
Ans:
Traditionally in JavaScript, you can have objects that have their own properties and methods. 
But object1 cannot use the methods of object2 and vice versa.
To overcome this there’s a way:
You can use call(), apply(), and bind() methods to tie a function into an object and call the function as if it belonged to that object.
.
We can write any common functionality in any function and use that function to operate various instances of any object.
e.g. printEmpDetails() {
}
---------------------------------------------------------------------------------------------------
Q16. What is recursive function?
Ans:
Recursion is a process of calling itself. A function that calls itself is called a recursive function.

The syntax for recursive function is:

function recurse() {
    // function code
    recurse();
    // function code
}

recurse();

e.g.
// program to count down numbers to 1
function countDown(number) {

    // display the number
    console.log(number);

    // decrease the number value
    const newNumber = number - 1;

    // base case
    if (newNumber > 0) {
        countDown(newNumber);
    }
}

countDown(4);
---------------------------------------------------------------------------------------------------
Q17. What is event Eventloop?
Ans:
Event loop: An event loop is something that pulls stuff out of the queue and places it onto 
the function execution stack whenever the function stack becomes empty.

---------------------------------------------------------------------------------------------------
Q18. What is factory function?
Ans:
- A factory function can be defined as a function that creates an object and returns it. 
- It is similar to constructor functions/class functions.
- They do not need the ‘new’ keyword when initiating new objects.
Using the Factory Functions
Factory functions are mainly used when the user wants to initialize the object of a class multiple times with some assigned value or static values. 
It makes the process easy since we just have to call this function and retrieve the new object created.

e.g.
      function createEmployeeObjects(name) {
         return {
            name: name,
            work: function () {
               console.log('New Employee Created with name: ' + name);
            }
         };
      }
      //Creating an Employee with factory function
      const emp1 = createEmployeeObjects('Steve Jobs');
      emp1.work();
      
      // Create a robot with name Chitti 2.O Upgraded
      const emp2 = createEmployeeObjects('Bill Gates');
      emp2.work();

---------------------------------------------------------------------------------------------------





