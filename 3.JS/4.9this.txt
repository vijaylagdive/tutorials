 Q3 this in JS?
Ans: 
In JavaScript, the this keyword refers to the current execution context, which can vary depending on how and where it is used. 
The value of this is dynamically determined at runtime and can change based on the context in which a function is called. 
Some common scenarios that help illustrate how this behaves:

1. In global context:
Outside of any function or object, this refers to the global object, which is typically window in a browser environment and global in Node.js.
console.log(this === window); // true (in a browser)
console.log(this)// window in browser and global in node js
--------------
2. Inside function:
Inside a regular function, this typically refers to the global object, but this can vary depending on how the function is called.
function myFunction() {
  console.log(this === window); // true (in a browser)
}
myFunction();
--------------
3. Inside an object method:
Inside a method of an object, this refers to the object itself.
const myObject = {
  prop: 'Hello',
  greet: function() {
    console.log(this.prop);
  }
};
myObject.greet(); // "Hello"
--------------
4. Inside an event handler:
In event handlers, (in web development) this often refers to the element that triggered the event.
document.getElementById('myButton').addEventListener('click', function() {
  console.log(this); // the DOM element that was clicked
});
-------
5. Inside constructor functions and classes:
Inside constructor functions and classes:
Inside constructor functions or class methods, this refers to the newly created object instance.
function Person(name) {
  this.name = name;
}
const person1 = new Person('Alice');
console.log(person1.name); // "Alice"
--------------
6. Using call() and apply() methods:
Using call() and apply() methods:
You can explicitly set the value of this using the call() or apply() methods on a function.
function greet() {
  console.log(this.name);
}
const person = { name: 'Bob' };
greet.call(person); // "Bob"
--------------
7. Arrow functions:
Arrow functions do not have their own this context. 
Instead, they inherit the this value from the surrounding lexical context.

const myObject = {
  prop: 'Hello',
  greet: () => {
    console.log(this.prop); // undefined (lexical this)
  }
};
myObject.greet();
---------------------------------------------------------------------------------------------------









