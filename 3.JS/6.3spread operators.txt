The spread operator: 
Introduced in ES6 and denoted by three consecutive dots .... 
Also allows to copy properties from one object to another. 
The spread operator makes it easier to work with arrays, function arguments, and objects.

Here are some common use cases of the spread operator:


1. Copying Arrays:
You can use the spread operator to create a shallow copy of an array.
const originalArray = [1, 2, 3];
const copiedArray = [...originalArray];
console.log(copiedArray); // Output: [1, 2, 3]

2. Merging arrays Arrays:
You can use the spread operator to create a new array by merging two or more arrays together.
javascript
const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];

const mergedArray = [...arr1, ...arr2];
console.log(mergedArray); // Output: [1, 2, 3, 4, 5, 6]


3. Function Arguments:
The spread operator can be used to pass elements of an array as individual arguments to a function.
function sum(a, b, c) {
  return a + b + c;
}

const numbers = [1, 2, 3];
const result = sum(...numbers);
console.log(result); // Output: 6


4. Expanding Strings:
You can use the spread operator to convert a string into an array of characters.
const str = "hello";
const charArray = [...str];
console.log(charArray); // Output: ["h", "e", "l", "l", "o"]


5. Merging Objects:
The spread operator can be used to create a new object by merging properties from multiple objects.
const obj1 = { a: 1, b: 2 };
const obj2 = { c: 3, d: 4 };

const mergedObj = { ...obj1, ...obj2 };
console.log(mergedObj); // Output: { a: 1, b: 2, c: 3, d: 4 }


6.Copying object:
const obj3 = {{},...obj1}
---------------------------------------------------------------------------------------------------
Q. Spread operator vs rest parameter









