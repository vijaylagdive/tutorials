Q1. What are the ES6 Features:
1. let and const variables
2. Arrow functions
3. Classes
4. Promise
5. Template Literals
6. Spread operator and Rest operators.
7. Default Parameters
8. Destructuring Assignment
9. Modules 
10. Map and Set
**************************************************
1. let const
---------------------------------------------------------------------------------------------------
2. Arrow Function
- Its ES6 feature that provides a more concise syntax for writing function expressions by removing out the "function" and "return" keywords.
- Arrow functions are defined using the fat arrow (=>) notation.

e.g.
let sumOfTwoNumbers = (a, b) => a + b;
console.log(sum(10, 20));  // Output 30

- We can also skip the parenthesis in the case when there is exactly one parameter, 
  but will always need to use it when you have zero or more than one parameter.
- If there are multiple expressions in the function body, then we need to wrap it with curly braces ("{}"). We also need to use the "return" statement to return the required value.

Differences and limitations:
- Does not have its own bindings to this or super, and should not be used as methods.
- Not suitable for call, apply and bind methods, which generally rely on establishing a scope.
- Can not be used as constructors.

- Can not use yield, within its body.
- Does not have new.target keyword.

---------------------------------------------------------------------------------------------------
3. Classes
---------------------------------------------------------------------------------------------------
4. Promises
Note: Refer Promises file
---------------------------------------------------------------------------------------------------
5. Template Literals in JS?

Template literals in ES6) allows you to create strings with embedded expressions. 
They are enclosed in backticks (`) instead of single or double quotes, and you can embed variables or expressions directly within them using ${}. 
Here's how template literals work in JavaScript:

Example:
const firstName = 'John';
const age = 30;
// Using template literals
const greeting = `Hello, my name is ${firstName} and I am ${age} years old.`;
console.log(greeting);
Hello, my name is John and I am 30 years old.
---------------------------------------------------------------------------------------------------
6. Spread operator and Rest operators.
a. Spread operators:
Object, Array destructuring
Rest parameters
Shallow copying of object.

Note: see seperate file for details

b. Rest operators:
Q6. Rest parameter
With the help of a rest parameter a function can be called with any number of arguments, no matter how it was defined. 
function fun(...input){
    let sum = 0;
    for(let i of input){
        sum+=i;
    }
    return sum;
}
console.log(fun(1,2)); // 3
console.log(fun(1,2,3)); // 6 
console.log(fun(1,2,3,4,5)); // 15
---------------------------------------------------------------------------------------------------
7. Destructuring Assignment
Destructuring assignment enables you to extract values from arrays and objects in a more concise and intuitive way.

1. Array destructuring:
Array destructuring allows you to extract values from an array and assign them to individual variables.

[a,b] = ['john','max'];
console.log(a); // john
console.log(b);  // max
.
2. Object destructuring:
Object destructuring allows you to extract properties from objects and assign them to individual variables.
const person = {
  firstName: "John",
  lastName: "Doe",
  age: 30,
};

const { firstName, lastName, age } = person;

console.log(firstName); // "John"
console.log(lastName);  // "Doe"
console.log(age);       // 30
---------------------------------------------------------------------------------------------------
8. Default paramater
In JavaScript, you can define default parameters for functions. 
Default parameters were introduced in ECMAScript 6 (ES6).
Here's how you can use default parameters:

function greet(name = 'Guest', greeting = 'Hello') {
  console.log(`${greeting}, ${name}!`);
}

greet(); // Output: Hello, Guest!
greet('John'); // Output: Hello, John!
greet('Alice', 'Hi'); // Output: Hi, Alice!
---------------------------------------------------------------------------------------------------
9. Modules
ES6 introduced a module system that allows you to import and export code between different files, improving code organization and reusability.
// In module.js
export const myVar = 42;

// In another file
import { myVar } from './module.js';
---------------------------------------------------------------------------------------------------
10. Map and Set.
The Map and Set data structures provide more flexible ways to work with collections of data.
const myMap = new Map();
myMap.set('key', 'value');

const mySet = new Set([1, 2, 3, 2, 1]);
---------------------------------------------------------------------------------------------------


