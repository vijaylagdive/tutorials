Q1. Explain the concept of "convention over configuration" in Spring Boot:
"Convention over configuration":
.
Default configuration and Sensible assumtions:
It is the idea that developers can get benefit from 'Default configurations' and 'Sensible assumptions', reducing the need for explicit configuration. 
- Spring Boot provides sensible defaults and makes intelligent choices based on common use cases and best practices.
- This allowins developers to focus more on writing business logic rather than dealing with complex setup and configuration details.
-------------------------------------------------------------------
Q2. Is it possible to change the port of the embeded tomcat server in spring boot?
Ans:
It is possible. By using server.port in application.properties.

In application.properties:
server.port=9090
-----------------------------------------------
Q3. Can we override or replace the Embeded tomcat server in spring boot?
Ans: 
- Yes we can replace the embeded tomcat server with any server by using starter dependency in the pom.xml file.
- The server dependency comes under the starter-web dependency,so we need add exclusion for that web dependency as below.
In pom.xml file:
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-web</artifactId>
	<exclusions>
		<exclusion>
		   <groupId>org.springframework.boot</groupId>
		   <artifactId>spring-boot-starter-tomcat</artifactId>
		</exclusion>
	</exclusions>
</dependency>

<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-jetty</artifactId>
</dependency>
-----------------------------------------------
Q4. What is diiference between @SpringBootApplication and @EnableAutoConfiguration annotation?
Ans:
@SpringBootAppplication combines 
@Configuration 
@EnableAutoConfiguration and 
@ComponentScan annotations to enable Java-based configuration and component scanning in your project.
.
@SpringBootApplication = @Configuration + @EnableAutoConfiguration+ @ComponentScan
.
vs
.
@EnableAutoConfiguration is used only to enable auto-configuration 
.
Spring boot enables the developer to use a single annotation instead of using multiple.
But as we know Spring provided loosely coupled features that we can use for each individual annotation as per our project needs. 
.
Opinionated is a software design pattern that decides or guides you into their way of doing things. 
Spring Boot is opinionated because it follows the opinionated default configuration that reduces developer efforts to configure the application. 
---------------------------------------------------------------------------------------------------
Q5 How to disable a specific auto-configuration class?
Ans:
We can use exclude attribute of @EnableAutoConfiguration annotation to exclude specific class.
You can use the exclude of @EnableAutoConfiguration, if you find any specific auto configuration classes that you do not want to be applied.
.
e.g.
@EnableAutoConfiguration(exclude={className})
@EnableAutoconfiguration(exclude={DataSourceAutoConfiguration.class})
---------------------------------------------------------------------------------------------------
Q6. What is difference between @RestController and @Controller in Spring Boot?
Ans:
@Controller: 
@Controller Maps the model-object to view or template and simply return human readable views.

@RestController: 
@RestControler simply returns the object in the form of HTTP response as String, JSON or XML.
It indicates that the data returned by each method will be written into the response body instead of rendering a template.
@RestController = @Controller + @ResponseBody

Example:
@GetMapping("/books")
@ResponseBody
public String showMyBooks() {
     return "Showing my books!!";
}

In the above function if you want to return String as it is then You have to write @ResponseBody below @RestMapping or @GetMapping annotation.
If you use @RestController for your controller class then there is no need to add @ResponseBody to your @RequestMapping or @GetMapping.
It automitically return String Json or XML
---------------------------------------------------------------------------------------------------
Q7. What is difference between @RequestMapping and @GetMapping?
Ans:
@RequestMapping:
It can be used with GET, POST, PUT and many other request methods using the method attribute(method = RequestMethod.GET) on the annotation.
@GetMapping:
It is an extension of @RequestMapping with specific GET method which helps you to improve clarity of request.

Example:
With RequestMapping
@RequestMapping(value="/user/{userId}", method = RequestMethod.GET)

With Getmapping
GetMapping(value="/user/{userId}")
---------------------------------------------------------------------------------------------------
Q8. What is the use of Profiles in spring boot?
Ans: 
- We use multiple environment while developing spring boot application such as dev, test, qa, prod etc.
- The configuration properties for these environments are different.
- For example we might be using an embeded H2 db for dev, Oracle or DB2 but prod.
  Even if DBMS is the same across environments, the URLs would definitly be different.
- Another example we can consider is the various port number for various environments.
- Spring has the provision to keep these 'profiles of environment configurations' seperately.
- So that instead of maintaining this programatically, the properties can be kept in seperate files such as:
 application-dev.properties, application-prod.properties, application-qa.properties.
- The default applicaiton.properties points to the currently active profile using spring.profiles.active so that the correct configuration is picked up.
 e.g: spring.profiles.active=prod
---------------------------------------------------------------------------------------------------
Q8. application.properties file in springboot?
Ans:
- In a Spring Boot application, the application.properties file is a configuration file used to configure various properties and settings for your application. 
- It is used to configure various aspects of your Spring Boot application, such as database connection settings, server port, logging levels, and much more.
- The file is typically written in a key-value pair format, where keys are used to specify configuration properties, 
  and values are used to set the corresponding values for those properties. 

For example:
spring.datasource.url=jdbc:mysql://localhost:3306/mydb
spring.datasource.username=myuser
spring.datasource.password=mypassword
server.port=8080
logging.level.root=INFO
---------------------------------------------------------------------------------------------------

Q9. What is Spring Actuator? What are its advantages?
Ans: Provides special feature to monitor and manage your application when you  push it to production.

<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-actuator</artifactId>
</dependency>
---------------------------------------------------------------------------------------------------

Q10. How to get the list of all the beans in your spring boot application?
Ans:

- Spring boot actuator "/Beans" is used to get the list of all the spring beans in your application.
- "/env" return the list of all the environment properties of running the spring boot application.
---------------------------------------------------------------------------------------------------







