Part10. Need of StringBuffer
When the content is almost fixed use String.
But when there is chance of changing content String is not recommeneded.

In case of String for every change new object is created every time.
That is not in case of String Buffer. Any change is done in the same instance only.

-----------------------------------------------------------------------------------------------------------------------------------------------------
Part11. String Buffer constructor.
1. StringBuffer sb = new StringBuffer();
Default capacity of StringBuffer will be 16.
If you add 17th character the next String Buffer object will be created with capacity (16+1)*2=34.
Then you add total 34 characters the capacity will be 34 only.
Once you add 35th character the capacity will be changed to (34+1)*2=70.
Automatically sb will be starting pointing to next object with extended capacity. 
The existing one will be eligible for garbage collection.
Example:
StringBuffer sb = new SringBuffer();
Sop(sb.capacity);//16
sb.append("abcdefghijklmnop");
sop(sb.capacity); 16
sb.append("q");
sop(sb.capacity);34


2. StringBuffer sb = new StringBuffer(int initialCapacity);
StringBuffer sb = new StringBuffer(1000);
System.out.println(sb.capacity()); //1000
If you then try to add 1001th character then it will create another object
with (1000+1)*2=2002 capacity.

3. StringBuffer sb = new StringBuffer(String s);
StringBuffer sb = new StringBuffer("durga");
capacity wiil be sb.length() + 16
StringBuffer sb = new StringBuffer("durga");
System.out.println(sb.capacity()); //21


-----------------------------------------------------------------------------------------------------------------------------------------------------
Part12. Important method of String Buffer
1. public int length();
------------------------
2. public int capacity();
------------------------
3. public char charAt(int);
------------------------
4. public StringBuffer append(String s);
------------------------
5. public StringBuffer insert()
append() method used to append at last.
insert() we can use to insert string at required position.
StringBuffer sb = new StringBuffer("abcdef");
sb.insert(2,"xyz");
System.out.println(sb);//abcxyzdef

StringBuffer sb = new StringBuffer("abcdef");
sb.insert(2,true);
System.out.println(sb);//abtruecdef
------------------------
6. public StringBuffer delete(int begin, int end);
It deletes characters in string starting from begin to end-1
StringBuffer sb = new StringBuffer("abcdefgh");
sb.delete(2,5);
System.out.println(sb);//abfgh
------------------------
7. public StringBuffer deleteCharAt(int index);
It deletes characters at given index.
Ex:
StringBuffer sb = new StringBuffer("abcde");
sb.deleteCharAt(3);
System.out.println(sb);//abfgh
------------------------
8. public StringBuffer reverse()
It reverses the characters.
StringBuffer sb = new StringBuffer("abcde");
sb.reverse();
System.out.println(sb);//abfgh
------------------------
9. public void setLength(int n);
public void setLength(int n)
It fixes the legth of string and removes other remaining chars
StringBuffer sb = new StringBuffer("aiswaryaabhi");
sb.setLength(8);
System.out.println(sb);//aiswarya
------------------------
10. public void ensureCapacity(int capacity)
It ensures the capacity of the stringbuffer.
StringBuffer sb = new StringBuffer();
System.out.println(sb.capacity());//16
sb.ensureCapacity(1000);
System.out.println(sb.capacity());//1000
------------------------
11. public void trimToSze();
releases the freeremaining capacity
StringBuffer sb = new StringBuffer(1000);
sb.append("abc");
System.out.println(sb.capacity());//1000
sb.trimToSize();
System.out.println(sb.capacity());//3
------------------------

Note:
Every method present in StringBuffer is synchronized.
At a time only one thread can operate on SringBuffer method.
To overcome this StribBuilder is introduced.
-----------------------------------------------------------------------------------------------------------------------------------------------------
Part 13. Need of String Builder
- StringBuffer is also mutable as like StringBuffer but all its method are synchronized.
- At a time only one thread is allowed to operate on StringBuffer object. 
- It incereases waiting time of threads and hence relatively performance is low.
.
All methods available in StringBuffer avaialbale in StringBuider only difference is that they are not synchronized.
StingBuilder is non-synchronized versoin of StringBuffer.
---------------------------------------------------------------------------------------------------
Part 14. StringBuffer vs StringBuilder
1.
StringBuffer: Every method present in StringBuffer is Synchronized
String Builder: No method present in StringBuilder is synchronized

2.
StringBuffer: At a time only one thread is allowed to operate on StringBuffer object. Hence String Buffer object is Thread safe.
String Builder: At a time multiple threads are allowed to operate on StringBuilder object and hence StringBuilder object is not Thread Safe.

3.
StringBuffer: It incereases waiting time of threads and hence relatively performance is low.
String Builder: Threads are not required to wait to operate on StringBuilder objec and hence relatively performance is high.

4.
String Buffer: Introduced in 1.0 version 
String Builder: Introduced in 1.5 version.

---------------------------------------------------------------------------------------------------
15. String vs StringBuffer vs StringBuilder
So when to use String, StringBuffer and StringBuilder?
1. If the content is fixed and wont change frequently then we should go for String.
2. If the content is not fixed and keep on changing but Thread safety is required then we should go for StringBuffer.
3. If the content is not fixed and keep on changing and Thread safety is not require then we should go for String Builder.
---------------------------------------------------------------------------------------------------
16. Methods Chaining.
append() reverse() insert() delete() methods returns StringBuffer object only.
So we can perform method chaining on this methods.
StringBuffer sb = new StringBuffer();
sb.append("durga").append("solutions").reverse().insert(2,"xyz").delete(3,7);

---------------------------------------------------------------------------------------------------
