Contents:
1. List Interface
2. List Specific methods.
3. ArrayList
4. Constructor in ArrayList
5. Example of arraylist
6. ArrayList vs Vector?
7. How to get synchronized version of ArrayList Object
8. LinkedList 
9. Methods in linked list.
10. Constructor in LinkedList.
11. Difference between ArrayList and LinkedList
12. Vector:
13. Vector specific methods?
14. Constructor of vector class
15. Examples of Vector class
16. Stack
-------------------------------------------------
Content1: List Interface:
- It is the child interface of Collection.
- Duplicates are allowed.
- Insertion order must be preserved. 
- We can differentiate duplicates by using index.
- We can preserve insertion order using index, hence index play very important role in list interface.
-------------------------------------------------
Content2: List specific methods:
1. void add(int index, Object o);
2. boolean addAll(int index, Collection c)
3. object get(int index);
4. object remove(int index);
5. object set(int index, Object new)
6 .int indexOf(Object o);
7. int lastIndexOf(Object o)
8. ListIterator listIterator();
-------------------------------------------------
Content3: ArrayList Class
- Underlying Structure: Resizable array or growable array.
- Duplicates are allowed.
- Insertion order preserved.
- Heterogeneous object allowed.
- 'null' insertion is possible.
- ArrayList and Vector classes implements RandomAccess interface so that we can access any Random element with the same speed.
- Hence if our frequent operation is retrieval operation then ArrayList is the best choice.
- Random Access: Present in java.util.package
- It doesn't contain any method and it is a Marker interface.
- ArrayList is the worst choice if our frequent operation is insertion or deletion in the middle.
- Because for that insertion and deletion several shift operation are require.
-------------------------------------------------
Content4: Constructor in ArrayList
1. ArrayList l = new ArrayList();
Creates an empty array list object with default initial capacity 10.
Once Array List reaches its max capacity a new Array List will be crated with new capacity.
New capacity will be = (currentCapacity * 3/2) + 1. 10*3/2 +1 = 16

2. ArrayList l = new ArrayList(int initialCapacity);

3. ArrayList l = new ArrayList(Collection c);
For any collection object if you want to create equivalent ArrayList object then go for this constructor.
This type of constructor meant for interconversion of Collection object.
-------------------------------------------------
Content5: Example of arraylist
public static void main(String[] args) {
	ArrayList l = new ArrayList();
	l.add("A");
	l.add(10);
	l.add("A");
	l.add(null);
	System.out.println(l);//[A,10,A,null]
	l.remove(2);
	System.out.println(l);//[A,10,null]
	l.add(2,"M");
	l.add("N");
	System.out.println(l);//[A,10,M,null,N]
}
----------------------------------------------------------------
Content6: ArrayList vs Vector?
Ans: 
Synchrniozation
Every Method present in ArrayList is Non-Synchronized.
Most of the methods in Vector are synchrinized

Thread Safety
At a time multiple threads are allowed to operate on ArrayList object and hence ArrayList is not thread safe.
At a time only one thread is allowed to operate on Vector object. So the vector is thread safe.
  
Performance:
Threads are not required to wait to operate on ArrayList, hence relatively performance is high.
Threads are required to wait to operate on Vector Object and hence performance is low.

Version:
Introduced in 1.2 version and it is non-legacy class.
Introduced in 1.0 version and it is a legacy class.
----------------------------------------------------------------
Content7: How to get synchronized version of ArrayList Object
By default ArrayList Object is non-synchrinized but we can get synchronized version of ArrayList by using Collections class's  SynchronizedList() method.
public static List synchronizedList(List l);

ArrayList l1 = new ArrayList();
List l = Collections.synchrinizedList(l1);

Synchronized List:
ArrayList l1 = new ArrayList();
List l = Collections.synchronizedList(l1);

Synchronized Set
public static Set synchrinizedSet(Set s1);

SynchronizedMap
public static Map synchrinizedMap(Map m1);
----------------------------------------------------------------
Content8: LinkedList 
- Underlying data structure: Double Linked List.
- Insertion order is preserved.
- Duplicates are allowed.
- Heterogeneous object are allowed.
- Null insertion is possible.
- LinkedList implements Serializable and Clonable interface but not RandomAccess interface.
- So Linked list is the best choice if our frequent operation is insertion or deletion in the middle.
- LinkedList is the worst choice if our frequent operation is retrieval operation.
----------------------------------------------------------------
Content9: Methods available in LinkedList:
Usually we can use LinkedList to implements stacks and queues.
To provide support for this requirement LinkedList class defines following specific methods.
void addFirst();
void addLast()
Object getFirst();
Object getLast();
Object removeFirst();
Object removeLast();
-------------------------------------------
Content10: Constructor in LinkedList.
1. LinkedList l1 = new LinkedList()//Creates empty list.
2. LinkedList l1 = new LinkedList(Collection c);
Creates an equivalent LinkedList Object for the given collection.

Example:
[ccc, Venky, Software, 30, null, durga]

-------------------------------------------
Content11: Difference between ArrayList and LinkedList
Best choice when:
ArrayList: is best choice if our frequent operation is retrieval.
Linked List: is best choice if our frequent operation is insertion and deletion.

Worst When
ArrayList: is the worst choice if our frequent operation is insertion or deletion.
Linked list: is worst choice when or frequent operatoin is retrieval.

Underlying DS:
ArrayList: Resizable and growable Array.
LinkedList: Double LinkedList.

RandomAccess:
ArrayList: Implements RandomAccess interface
LinkedList: Doesnt implements RandomAccess interface.

-------------------------------------------
Content12: Vector:
- Underlying data structure: Resizable array or growable array.
- Duplicates object are allowed.
- Insertion order is preserved.
- null insertion is possible.
- Heterogeneous object are allowed.
- Vector class implements serializable, clonable and RandomAccess interfaces.
- Most of the methods present in Vector are synchronized. Hence Vector object is ThreadSafe.
- Best choice if frequent operation is retrieval.

-------------------------------------------
Content13: Vector specific methods?
To add object
add(Object o); //From collection
add(int index, Object o); //From List
addElement(Object o) // Form Vector

To remove objects
Remove(Object o);// from Collection
removeElement(Object o);// from Vector
remove(int index);// from List
RemoveElementAt(int index);//from Vector
clear();// from collection
removeAllElements(); //from vector

Methods For Accessing element
Object get(int index); //from Collection
Object elementAt(int index); //from Vector
Object firstElement();//from Vector
Object lastElement(); //from Vector

Other methods:
int size();
int capacity();
Enumeration elements();

----------------------------------------
Content14: Constructor of vector class. Four constructor.
1. Vector v = new Vector();
- Creates an empty vector object with default initial capacity 10.
- Once vector reaches its max capacity a new Vector Object will be created.
- New vector created with capacity new capacity = 2 * currentCapacity.

2. Vector v = new Vector(int initialCapacity);
- Create an empty Vector objectwith specified initial capacity.

3. Vector v = new Vector(int initialCapacity, int incrementalCapacity);

4. Vector v = new Vector(Collection c);
-------------------------------------------------
Content15: Examples of Vector class
Example1: 
		Vector v = new Vector();
		System.out.println(v.capacity()); //10
		for (int i=1; i<=10; i++) {
			v.addElement(i);
		}
		System.out.println(v); [1,2,3,4,5,6,7,8,9,10]
		System.out.println(v.capacity());//10
		v.addElement("A");
		System.out.println(v.capacity());//20
		System.out.println(v);[1,2,3,4,5,6,7,8,9,10,A]
		
Example2: 
	public static void main(String[] args) {
		Vector v = new Vector(10,5);
		System.out.println(v.capacity()); //10
		for (int i=1; i<=10; i++) {
			v.addElement(i);
		}
		System.out.println(v); //[1,2,3,4,5,6,7,8,9,10]
		System.out.println(v.capacity());//10
		v.addElement("A");
		System.out.println(v.capacity());//15
		System.out.println(v);//[1,2,3,4,5,6,7,8,9,10,A]
	}
----------------------------------------------------------
Content16: Stack
Stack 
- It is child class of Vector.
- It is specially designed class for LIFO order. 

Constructor
Stack s = new Stack();

Methods.
1. Object push(Object o);//For inserting object to stack
2. Object pop();// Removes and returns top of the stack.
3. Object peak();// Returns the top of the stack without removal object.
4. boolean empty()// returns true if stack is empty
4. int search(Object obj);
- If the specified object is available it returns its offset from top of the stack.
- If the object is not available then it returns -1;

Example:
Stack s = new Stack();
s.push("A");
s.push("B");		
s.push("C");		
		
System.out.println(s);//[A,B,C]
System.out.println(s.search("A"));//3. Counting from top
System.out.println(s.search("Z"));//-1

----------------------------------------------------------