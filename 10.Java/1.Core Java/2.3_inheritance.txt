Inheritance:
It is the mechanism in Java by which one class is allowed to inherit the features(fields and methods) of another class. 
In Java, Inheritance means creating new classes based on existing ones. 
A class that inherits from another class can reuse the methods and fields of that class. 
In addition, you can add new fields and methods to your current class as well.  

Why Do We Need Java Inheritance?
Code Reusability: 
The code written in the Superclass is common to all subclasses. 
Child classes can directly use the parent class code.
Method Overriding: 
Method Overriding is achievable only through Inheritance. 
It is one of the ways by which Java achieves Run Time Polymorphism.
Abstraction: 
The concept of abstract where we do not have to provide all details is achieved through inheritance. 
Abstraction only shows the functionality to the user.

Simple example:
Dog inherit features of Animal

class Dog extends Animal 
{

}
----------------------------------------------------------
Types of inheritance:
1. Single Inheritance
2. Multilevel Inheritance
3. Hierarchical Inheritance
4. Multiple Inheritance
5. Hybrid Inheritance


1. Single Inheritance
In single inheritance, subclasses inherit the features of one superclass. 
For example class A serves as a base class for the derived class B.
class B extends Class A
------------------------
2. Multilevel Inheritance
In Multilevel Inheritance, a derived class will be inheriting a base class, and as well as the derived class also acts as the base class for other classes. 
For example:
class B extends A
class C extends B

class A serves as a base class for the derived class B, which in turn serves as a base class for the derived class C. 
In Java, a class cannot directly access the grandparent’s members.
------------------------
3. Hierarchical Inheritance
In Hierarchical Inheritance, one class serves as a superclass (base class) for more than one subclass. 
For example class A serves as a base class for the derived classes B, C, and D.

class B extends A
class C extends A
class D extends A
------------------------
4. Multiple Inheritance (Through Interfaces)
In Multiple inheritances, one class can have more than one superclass and inherit features from all parent classes. 
Please note that Java does not support multiple inheritances with classes. 
In Java, we can achieve multiple inheritances only through Interfaces. 
.
interface one
{
	public void print_geek();
}
interface two
{
	public void print_for();
}
interface three extends one, two
{
	public void print_geek();
}

class child implements three {
    @Override public void print_geek()
    {
        System.out.println("Geeks");
    }
 
    public void print_for() { System.out.println("for"); }
}

// Drived class
public class Main {
    public static void main(String[] args)
    {
        child c = new child();
        c.print_geek();
        c.print_for();
        c.print_geek();
    }
}

------------------------
5. Hybrid Inheritance
It is a mix of two or more of the above types of inheritance. 
Since Java doesn’t support multiple inheritances with classes, hybrid inheritance involving multiple inheritance is also not possible with classes. 
In Java, we can achieve hybrid inheritance only through Interfaces if we want to involve multiple inheritance to implement Hybrid inheritance.
However, it is important to note that Hybrid inheritance does not necessarily require the use of Multiple Inheritance exclusively. 
It can be achieved through a combination of Multilevel Inheritance and Hierarchical Inheritance with classes or  Hierarchical and Single Inheritance with classes. 
Therefore, it is indeed possible to implement Hybrid inheritance using classes alone, without relying on multiple inheritance type. 
------------------------

Advantages Of Inheritance in Java:
Code Reusability: 
Inheritance allows for code reuse and reduces the amount of code that needs to be written. 
The subclass can reuse the properties and methods of the superclass, reducing duplication of code.

Polymorphism: 
Inheritance allows for polymorphism, which is the ability of an object to take on multiple forms. Subclasses can override the methods of the superclass, which allows them to change their behavior in different ways.

Abstraction: 
Inheritance allows for the creation of abstract classes that define a common interface for a group of related classes. 
This promotes abstraction and encapsulation, making the code easier to maintain and extend.

Class Hierarchy: 
Inheritance allows for the creation of a class hierarchy, which can be used to model real-world objects and their relationships.

super keyword:
Refers to immidiete parent.
super() used to call parent class constructor from inside child class
constructor.



------------------------------------------

Base b = new Derived() //possible
Derived d = new Derived()//possible
Derived d = new Base()//incompatible types: Base cannot be converted to Derived Compatible error. 

