1) OOPS Concepts - What are oops concepts and explain each and how do we achive them - He explained it very well and have deep knowledege on it
2) Data structures - Available datastructures and why they required, Stack,Queue, List, Array - What is a Queue, how it is different from stack and how is it implemented? How to implement a stack using queue? How to check if a given Binary Tree is BST or not? Heap SOrt ? - custom queue,custom stack - Able to explain in detail with examples
3) Collections - Array, ArrayList, LinkedList, Hashmap, Hastable, List to set, How does HashSet is implemented in Java, How does it use Hashing? - Good in collections concepts. Here he was having deep knowledge for hashing and each collections.
4) Basic java - What do you understand by Java virtual machine? String pool? What is the purpose of a default constructor? What do you understand by copy constructor in Java? Primitive and Wrapper classes, - Overloading -  Overiding - String , WHy string is immutable - Generics - he was answered clearly just some more handson needed
4) Exception handling - Whats business use case where we use exception handling, Throws and Throwable, Catch multiple? -  Answered well
5) Memory management - What is memory management in java? - Not much clear in it but explained concept
6) Concurrency - What do you mean by concurrency? - Usecase? - Not able to explain with example
7) REST - Available methods, RESTFUL api, Idempotent,How do you publish the api from your application - Here was good in explaining each method of REST. Patch method was explained very well
8) Spring - What is spring, Dependncy injection and Scopes, IOC - DI - Exclude Bean generation while startup - DI and Lazy initialization for an object is explained in best ways
9) Spring Boot - MVC architecture, MVC vs Spring boot, What are anotations -  Comparison for MVC and Spring boot is done in different way.

10) Spring cloud - 
11) Unit test tools -  Knows most of details for unit testing.
12) DB - Queries ,DDL DML, Stored procedures, Why views & Triggers, where to use sequence - MySQL,Oracle is used.
13) Hibernate - How to inject table, what are save and persist, get and load - configuration, transaction management,
14) Jenkins - 
15) Microservices - What is microservice architecture ? Pros and Cons of Microservice architect , Communication, Authorization and Authentication,How microservices communicate with other services? How did you implement Oauth2 in your application? How many services are there in your microservices bases application? - Have good understanding on it
16) Design pattern - observer, factory - Factory pattern is explained 
17) Version control - Git

What is the performance effect of a large number of import statements which are not used?
Answer: They are ignored if the corresponding class is not used.
Give a scenario where hotspot will optimize your code?
Answer: If we have defined a variable as static and then initialized this variable in a static block then the Hotspot will merge the variable and the initialization in a single statement and hence reduce the code.
What will happen if an exception is thrown from the finally block?
Answer: The program will exit if the exception is not catched in the finally block.
 How does decorator design pattern works in I/O classes?
Answer:  The various classes like BufferedReader , BufferedWriter workk on the underlying stream classes. Thus Buffered* class will provide a Buffer for Reader/Writer classes.
If I give you an assignment to design Shopping cart web application, how will you define the architecture of this application. You are free to choose any framework, tool or server?
Answer:  Usually I will choose a MVC framework which will make me use other design patterns like Front Controller, Business Delegate, Service Locater, DAO, DTO, Loose Coupling etc. Struts 2 is very easy to configure and comes with other plugins like Tiles, Velocity and Validator etc. The architecture of Struts becomes the architecture of my application with various actions and corresponding JSP pages in place.
What is a deadlock in Java? How will you detect and get rid of deadlocks?
Answer:  Deadlock exists when two threads try to get hold of a object which is already held by another object.
Why is it better to use hibernate than JDBC for database interaction in various Java applications?
Answer:  Hibernate provides an OO view of the database by mapping the various classes to the database tables. This helps in thinking in terms of the OO language then in RDBMS terms and hence increases productivity.
How can one call one constructor from another constructor in a class?
Answer:  Use the this() method to refer to constructors.
What is the purpose of intern() method in the String class?
Answer:  It helps in moving the normal string objects to move to the String literal pool
How will you make your web application to use the https protocol?
Answer:  This has more to do with the particular server being used  than the application itself. Here is how it can be done on tomcat:


internaal working of hashmap,concepts like fail fast and fail safe iterator,when to use arraylist,when to use linkedlist, how to use a custom object as a key in Collection classes like Map or Set,Hashmap Sorting
custom object as a key in Collection classes like Map or Set
custom object arraylist sorting for all attributes in object
concurrentCollectionClasses
Arraylist Sorting in reverse order in one liner
PermGen space in JVM. memory areas for instance and static variables storage,how to callgarbage collector explicitly
 string pool,heap,stack,local vars and member vars storage,static vars and permgen,garbage collection
spring boot way of handling exceptions,empty catch block
know abput difference between the throw and throws
 @ControllerAdvice,@ExceptionHandler,
custom exxception
OutOfMemoryError
exception inside a lambda expression’s body
spring boot annotations like @Service @ component,spring cloud eureka ,edge/gateway and central config server
basics for docker worked on like docker image
Callable and Future in Java, Executor interface but could answer object level locking,notify() and notifyAll()
 
HTTP methods questions like PUT usage,nameing conventions for rest endpoint
Spring vs Spring MVC vs Spring boot
"spring boot adv, annotations @Component vs @Service,@Repositoryand @Transactional,embedded server
Not worked on spring cloud.But have a bit knowlege on this like eurekaserver,discovery server"
how to test static and void methods,easymock he has worked on


What's DRY(dont repeat yourself) patterns ? 
What technical process you set ? (e.g. Code review, branching & merging)
Can we write our own cache system and use it? How
A restful api url design for list of employees, add employees, delete employee, update employee, 
2 egg floor problem to determine floor no. that can break an egg.
RabbitMQ - How why where 
Log4j - ?
How do youAnalyse production issues?
Java 8 Streams


Write a Java program or function to find most repetitive character or maximum occurring character in the given string. For example, if "Java Concept Of The Day" is the input string then 'a' is the maximum occurring character which occurred 3 times in the string. Note that don’t count the spaces in the given string.

String s = "Java concept of the day";
String[] sArr = s.split("");
Map<String, Integer> map = new HashMap<String, Integer>();
int count = 1;
for (int i=0; i<sArr.length; i++){
	if(sArr[i]!= null && !sArr[i].isEmpty() && map.keySet().contains(sArr[i])){
		count++;
	}else{
		continue;
	}
	map.put(sArr[i], count);
}
TreeHashSet ths = map.entry().getValues();

String val = map.stream().filter(e -> e.getKey(ths.get(ths.size()))).collect(Collectors.joining());

System.out.println("Max occurance character-->"+val);

Given a string, your code must find out the first repeated as well as non-repeated character in that string. For example, if “HappyNewYear” is the given string, then ‘H’ is a first non-repeated character and ‘a’ is a first repeated character.

 public void findDuplicate(String input) {
		 
		 List<String> inputList = Arrays.asList(input.split(""));
		 String duplicateVal="";
		 String nonDuplicateVal="";
		 for(int i=0;i<inputList.size();i++) {
			 
			 String substring = input.substring(i+1,inputList.size());
			 if(substring.contains(inputList.get(i))){
				 duplicateVal=inputList.get(i);
				 break;
			 }
		 }
  for(int i=0;i<inputList.size();i++) {
			 
			 String substring = input.substring(i+1,inputList.size());
			 if(!substring.contains(inputList.get(i))){
				 nonDuplicateVal = inputList.get(i);
				 break;
			 }
		 }
		 System.out.println("First Duplicate Element : " + duplicateVal);
		 System.out.println("First non Duplicate Element : " + nonDuplicateVal);
		 
	 }
	 

Application development approach - Have good knowledge from architecture things as well as factors to be considered while developing application. Gave good examples of latency, security and scalablity things 

Approach to API Design - 
Scalablity -


Oops and Datastructure 
-abstraction with example
-find loop in linked list
-time complexities
-SOLID Principle
-bubble sort
-Linked List as Queue
-Polymorphism

Core java
-private
-abstract vs interface 
-Object class 
-final reference 
-overriding rules
-default implementation equals method explained
-Interface vs abstract class 
-protected vs default 
-cloning 
-comparator vs comparable
-Immutable implementation
-Why string immutable 
-security concepts
-Deep cloning implementation 

Collection
-Custom key for hashmap  
-synchronized 
-Synchronized vs Concurrent explained
-CopyOnWriteArrayList 
-ArrayList sizing
-Arraylist vs LinkedList,time complexity of add and get
-equals and hashcode use in hash collision
-Treeset 
-Hashset underlying data structure 
-Garbage collection
-Hashmap resizing
-ConcurrentModificationException 
-Hash collision
-hashcode and equals use 
-Custom hash map key
-Treeset vs HashSet
-Hashmap working
-Hashing knows use cases, 

-memeory management in java

Exceptions -
-unchecked exception custom
-unchecked and checked exception, real time scenarion
-Spring exception handling,global exception handling

-Objects lock

Java 8
-map method use 
-filter 
-java 8 intro
-map and flatmap 
-map method 

REST
-@PathVariable 
-PUT vS PATCH 
-200 status code
-RestControllers thread safe
-Eager vs lazy 
-POST vs PUT 
-Restcontroller vs controller

Spring
-Spring data 
-Cyclic dependancy in spring
-@Qualifier explained
-@Component, @Service explained
-scope of beans  explained
-@scope explained
-@Springbootapplication explained
-Implement spring security
-exclude auto config
-Mockito
-How to Limit request explined using gayeway
-Experience on Spring boot

-count of employee per department 

Design patter-
-explained theory on strategy pattern, Immutable,
-Singleton didnt know completely like breaking by serializable
-eureka use
-circuit breaker knows
-Diamond problem
-Immutable, Singleton
-Heap dump

Program -
-Find least occured character- Incomplete but was going correct
-String palindrome



========================================Fiserv=============================

Javascript :
1. deference between var, let, const
2. what is prototype 
3. what is hoisting
4. what is event loop
5. scoping in javascript
6. what is the difference between filter and map method in ES6.
7. how will you remove the first element from an array.

ReactJS : 
1. what are the different faces of a component
2. component life cycle methods
3. have you worked with hooks? What are they?
4. say there is one common component and from one parent you are passing one props but from another parent you are not passing that props. So how will you validate that prop inside the child component?
5. do you know redux and how it works and what is the use of it
6. how will you handle the authentication in an application
7. have you worked with token based authentication
8. where will you store the token?
9. do you know openId auth?
10. what is context api
11. how will you handle the errors in React JS
12. how will you measure and optimise the performance in React JS

There was no coding problem to solve but gave two different code and asked for the output of it.
1. 
var a = 1;
function b() {
 a = 10; return;
 function a() {}
}
b();
console.log(a); // output of a

2. 
var a = 1;
function b() {
 a = 10; return;
}
function a(){}
b();
console.log(a); // output of a



1. Which unit testing framework you are using?



1. What is web-pack
2. Do you have any idea about CI/CD pipelines?
3. Have you worked with any UI library
4. Have you worked with any form library


Datastructure - 8
Core java - 7
Spring boot - 6.5
Microservices - 6
Database - 7
Frontend - 6



Rest API Design & API Standards - 
Need of datastructures
How to calculate time complexity? -