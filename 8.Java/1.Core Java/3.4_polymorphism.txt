Polymorphism in Java:

Polymorphism is a concept by which we can perform a single action in different ways. 
Polymorphism is derived from 2 Greek words: poly and morphs. 
The word "poly" means many and "morphs" means forms. 
So polymorphism means many forms.

There are two types of polymorphism in Java: 
1. compile-time polymorphism: Method overloading
2. runtime polymorphism: Method overriding.

1. Compile time polymorphism:
Method Overloading:
Constructor overloading:
We can create multiple constructor in a same class. It is called constructor overloading. 
e.g. default constructor and parameterized constructor.
public Student() {
  Sysout("Hello.. this is default constructor");
}

public Student(int val) {
  Sysout("Hello.. this is parameterized constructor with parameter.");
}

We can achieve overloading using: 
1. Number of argument different.
2. Type of constructor different
3. Order of argument is different. 

Method overloading:
Having multiple methods in same class with same name.
with 
different number of argument or 
different types of constructor or
different order of argument.


---------------------------------------------------------
2. Runtime polymorphism:
Method overriding:
Method overriding is the process of providing a new implementation for a method that is already defined in the superclass.

Example:
class Animal {
	void sound() {
 		System.out.println("Animal makes a sound.");
	}

}

class Dog extends Animal {
	@Override
	void sound() {
		System.out.println("Dog barks.");
	}
}


Note:
34. Can you override a private or final method in Java?
No, you cannot override a private method as it is not accessible outside the class.
And you cannot override a final method as it is marked as a final and cannot be
modified.
---------------------------------------------------------
