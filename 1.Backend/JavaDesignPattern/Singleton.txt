Singleton Design pattern:
- The singleton pattern restricts the instantiation of a Class and ensures that only one instance of the class exists in the Java Virtual Machine.
- Singleton Pattern says that just"define a class that has only one instance and provides a global point of access to it".
- In other words, a class must ensure that only single instance should be created and single object can be used by all other classes.
.
Singleton class can be instantiated by two methods:
1. Early initialization : 
In this method, class is initialized whether it is to be used or not. 
The main advantage of this method is its simplicity. 
You initiate the class at the time of class loading. 
Its drawback is that class is always initialized whether it is being used or not.

2. Lazy initialization : 
In this method, class is initialized only when it is required. 
It can save you from instantiating the class when you donâ€™t need it. 
Generally, lazy initialization is used when we create a singleton class.

Example of Early initialization:
class A{  
 private static A obj = new A();//Early, instance will be created at load time  
 private A(){}  
   
 public static A getA(){  
  return obj;  
 }  
}  
-------------------------------------------------
Example of Lazy initialization:
class A{  
 private static A obj;  
 private A(){}  
   
 public static A getA(){  
   if (obj == null){  
		if (obj == null){  
			obj = new Singleton();//instance will be created at request time  
		}                    
    } 	 
	return obj;  
 }  
}  

---------------------------------------------------------------------------------------------------

