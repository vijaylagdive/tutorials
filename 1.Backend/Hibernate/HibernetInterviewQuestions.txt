Q1. What is hibernet?
Ans:
- Hibernate is a Java-based persistence framework and an object-relational mapping (ORM) framework.
- Hibernet basically allows a developer to map POJO - plain old Java objects - to relational database tables.
- The aim of the hibernate framework is to free the developer from the common data persistence-related complex configurations and tasks. 
- It does so by mapping the POJO objects with the database tables efficiently and most importantly in an abstract manner.
- The developer need not know the underlying complications involved. 
- Along with abstraction, the queries can be executed in a very efficient manner. 
- All these help developers to save a lot of time involved in development.
-------------------------------------------------
Q2. What is ORM in Hibernate?
Ans:
- Hibernate ORM stands for Object Relational Mapping. 
- This is a mapping tool pattern mainly used for converting data stored in a relational database to an object used in object-oriented programming constructs. 
- This tool also helps greatly in simplifying data retrieval, creation, and manipulation.
-------------------------------------------------
Q3. What are the advantages of Hibernate over JDBC?
Ans:
The advantages of Hibernate over JDBC are listed below:
1. Clean Readable Code: 
Using hibernate, helps in eliminating a lot of JDBC API-based boiler-plate codes, thereby making the code look cleaner and readable.

2. HQL (Hibernate Query Language): 
Hibernate provides HQL which is closer to Java and is object-oriented in nature. 
This helps in reducing the burden on developers for writing database independent queries. 
In JDBC, this is not the case. 
A developer has to know the database-specific codes.

3. Transaction Management: 
JDBC doesn't support implicit transaction management. 
It is upon the developer to write transaction management code using commit and rollback methods. 
Whereas, Hibernate implicity provides this feature.

4. Exception Handling: 
Hibernate wraps the JDBC exceptions and throws unchecked exceptions like JDBCException or HibernateException. 
This along with the built-in transaction management system helps developers to avoid writing multiple try-catch blocks to handle exceptions. 
In the case of JDBC, it throws a checked exception called SQLException thereby mandating the developer to write try-catch blocks to handle this exception at compile time.

5. Special Features: 
Hibernate supports OOPs features like inheritance, associations and also supports collections. These are not available in JDBC

6. Provides caches for performance: 
- Hibernate provides first level and second level cache.

-------------------------------------------------
Q4. What are some of the important interfaces of Hibernate framework?
Ans:
Hibernate core interfaces are:
1. Configuration
2. Session
3. SessionFactory
4. Criteria
5. Query
6. Transaction
-------------------------------------------------
Q5. What is a Session in Hibernate?
Ans: 
- A session is an object that maintains the connection between Java object and database. 
- Session provides way for storing, retrieving, modifying or deleting data from database.
- It provides methods like save(), persist(), load(), get(), update(), delete(), etc. 
- Additionally, It has factory methods to return Query, Criteria, and Transaction objects.
- It holds first-level-cache data by default.
-------------------------------------------------
Q6. What is a SessionFactory?
Ans:
- SessionFactory provides an instance of Session. 
- As a good practice, the application generally has a single instance of SessionFactory. 
- It also holds second-level cache data if enabled.
- The internal state of a SessionFactory which includes metadata about ORM is immutable, i.e once the instance is created, it cannot be changed.
- This also provides the facility to get information like statistics and metadata related to a class, query executions, etc. 
-------------------------------------------------
Q7. What can you tell about Hibernate Configuration File?
Ans:
- Hibernate Configuration File or hibernate.cfg.xml is one of the most required configuration files in Hibernate. 
- By default, this file is placed under the src/main/resource folder.
- The file contains database related configurations and session-related configurations.
- Hibernate facilitates providing the configuration either in an XML file (like hibernate.cfg.xml) or a properties file (like hibernate.properties).
- There must be one configuration file for each database used in the application.
- Suppose if we want to connect with 2 databases, then we must create 2 configuration files with different names.
- This file is used to define the below information:
1. Database connection details: Driver class, URL, username, and password.
2. Hibernate properties: Dialect, show_sql, second_level_cache, and mapping file names.
-------------------------------------------------
Q8. get() and load() methods?
Ans:
1.
get() method returns null if object is not found in cache as well as on database.
load() method throws ObjectNotFoundException if object is not found on cache as well as on database.

2.
get() This method gets the data from the database as soon as it is called if the object is not in session cache.
load() method returns proxy object and loads the data obly when it is required.

3.
get(): The database is hit everytime the method is called.
load(): The database is hit only when it is really needed and this is called Lazy loading which increases the performance.

4. 
get(): Use if you are not sure that object exists in db or not.
load(): Use if you are sure that object exists in database.
-------------------------------------------------
Q9. HQL?
Ans:
Hibernate Query Language (HQL) is used as an extension of SQL. 
It is very simple, efficient, and very flexible for performing complex operations on relational databases without writing complicated queries. 
HQL is the object-oriented representation of query language, i.e instead of using table name, we make use of the class name which makes this language independent of any database.
This makes use of the Query interface provided by Hibernate. The Query object is obtained by calling the createQuery() method of the hibernate Session interface.
HQL vs SQL
HQL:
Database independent.
Easy to learn for programmer.
e.g. "from Student". here Student is class.

SQL:
Database dependent.
Easy to learn for DBA.
e.g. "Select * from Student". here Student is Table name.

-------------------------------------------------
Q10. Can you tell the difference between getCurrentSession and openSession methods?
Ans:
Both the methods are provided by the SessionFactory Interface. The main differences are given below:
1.
getCurrentSession(): This method returns the session bound to the context.
openSession(): This method always opens a new session.

2.
getCurrentSession(): 
This session object scope belongs to the hibernate context and to make this work hibernate configuration file has to be modified by adding 
<property name = "hibernate.current_session_context_class"> thread </property>. 
If not added, then using the method would throw an HibernateException.
openSession(): 
A new session object has to be created for each request in a multi-threaded environment. 
Hence, you need not configure any property to call this method.

3.
getCurrentSession():
This session object gets closed once the session factory is closed.
openSession():
It's the developer’s responsibility to close this object once all the database operations are done.

4.
getCurrentSession(): In a single-threaded environment, this method is faster than openSession().
openSession(): In single threaded environment, it is slower than getCurrentSession()single-threadeda 
-------------------------------------------------
Q11. What is Caching in Hibernate?
Ans:
- Hibernate caching is the strategy for improving the application performance by pooling objects in the cache so that the queries are executed faster.
- Cache is used to reduce the number of queries.
- Hibernate caching is particularly useful when fetching the same data that is executed multiple times. 
- Rather than hitting the database, we can just access the data from the cache. 
- This results in reduced throughput time of the application.
.
Types of Hibernate Caching:
First Level Cache:
This level is enabled by default.
The first level cache resides in the hibernate Session object.
Since it belongs to the session object, the scope of the data stored here will not be available to the entire application, 
as an application can make use of multiple session objects.
.
Can be defined as below:
Client <--> Session <--> First Level Cache <--> Database.
Example:
        
		Session session = factory.openSession();
		Student student=(Student)session.get(Student.class, 108); //For this db query will be hit.		
        System.out.println(student);
        Student student1=(Student)session.get(Student.class, 108);// For this the query will not be hit because the data is stored in session.
        System.out.println(student1);
		System.out.println(session.contains(student1));//Will return true if sessions cache contains the object.
				
.
.
Second Level Cache:
Second level cache resides in the SessionFactory object and due to this, the data is accessible by the entire application.
This is not available by default. It has to be enabled explicitly.
EH (Easy Hibernate) Cache, Swarm Cache, OS Cache, JBoss Cache are some example cache providers.
We can enable it as below:

1. In pom.xml you need to add dependencies like:
		<!-- https://mvnrepository.com/artifact/net.sf.ehcache/ehcache -->
		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache</artifactId>
			<version>2.10.6</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-ehcache -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-ehcache</artifactId>
			<version>5.4.5.Final</version>
		</dependency>


2. In config file:
<property name="cache.region.factory_class">org.hibernate.cache.ehcache.internal.EhcacheRegionFactory</property>

3. For the Student entity:
@Cacheable
@Cache(usage = CacheConcurrencyStrategy.READ_ONLY)
public class Student {
}

With this if you close first session then also the object can be accessed which is available in secon level cache in Session Factory as below.
		Session session1 = factory.openSession();
		// first

		Student student1 = session1.get(Student.class, 12424);
		System.out.println(student1);

		session1.close();

		Session session2 = factory.openSession();
		// second
		Student student2 = session2.get(Student.class, 12424); //First session is closed then also if we try to get the student dat
		System.out.println(student2);//we can get the object without hitting db query.

		session2.close();
-------------------------------------------------
Q12. What is criteria API in hibernate?
Ans:
- Criteria API in Hibernate helps developers to build 'dynamic criteria queries' on the persistence database. 
- Criteria API is a more powerful and flexible alternative to HQL queries for creating dynamic queries.
- This API allows to programmatically develop 'criteria query' objects. 
- The org.hibernate.Criteria interface is used for these purposes. 
- The Session interface of hibernate framework has 'createCriteria()' method. 
- 'createCriteria()': Takes the persistent object’s class or its entity name as the parameters and 
returns instances of the persistence object's class when your application executes a criteria query.
- It also makes it very easy to incorporate restrictions to selectively retrieve data from the database. 
- It can be achieved by using the add() method which accepts the org.hibernate.criterion.Criterion object representing individual restriction.

Usage:
1. To return all the data of Student entity class.
Criteria criteria = session.createCriteria(Student.class);
List<Student> results = criteria.list();

1. To return all the data of Student entity class.
Criteria criteria = session.createCriteria(Student.class);
List<Student> results = criteria.list();

2. Restrictions.eq()
Used to retrive objects whose property has value "equal to" the restriction. 
Example: To fetch all records with name "John":
Criteria criteria = session.createCriteria(Student.class);
criteria.add(Restrictions.eq("name","John"));
List<Student> results = criteria.list();

3. Restrictions.ne()
Used to get objects whose property has the value “not equal to” the restriction.
Example: To fetch all the records name not equal to "John".
Criteria criteria= session.createCriteria(Student.class);
criteria.add(Restrictions.ne("name","John"));
List<Student> results = criteria.list()

4. Restrictions.like();
Used to retrieve all objects whose property matches a given pattern.
For cases sensitive: Restrictions.like() 
For cases insensitive: Restrictions.ilike()
Criteria criteria= session.createCriteria(Student.class);
criteria.add(Restrictions.like("fullName","Hib%",MatchMode.ANYWHERE));
List<Student> results = criteria.list();
-------------------------------------------------
Q13. Can you tell the difference between setMaxResults() and setFetchSize() of Query?
setMaxResults(): 
The function works similar to LIMIT in SQL. 
Here, we set the maximum number of rows that we want to be returned. 
This method is implemented by all database drivers.
.
setFetchSize(): 
Works for optimizing how Hibernate sends the result to the caller for example: are the results buffered, are they sent in different size chunks, etc. 
This method is not implemented by all the database drivers.
-------------------------------------------------
16. Does Hibernate support Native SQL Queries?
Ans:
Yes, it does. Hibernate provides the 'createSQLQuery()' method to let a developer call the native SQL statement directly and returns a Query object.
Consider the example where you want to get employee data with the full name “Hibernate”. 
We don’t want to use HQL-based features, instead, we want to write our own SQL queries. 
.
In this case, the code would be:
Query query = session.createSQLQuery( "select * from interviewbit_employee ibe where ibe.fullName = :fullName")
                   .addEntity(InterviewBitEmployee.class)
                   .setParameter("fullName", "Hibernate"); //named parameters
List result = query.list();
Alternatively, native queries can also be supported when using NamedQueries.

-------------------------------------------------




