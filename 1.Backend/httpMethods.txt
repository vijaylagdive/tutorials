GET: Readonly

POST: New record inserted everytime.
Post create new records everytime.

PUT: put method checks whetehre record is thre if yes then it rewrite it with new values. Otherwise it creates a new record.
New + Update

Delete: Deletes record.

---------------------------------------------------------------------------------------------------
Idempotent vs Non-Idempotent methods
In the context of HTTP, an idempotent request is a request that can be safely and effectively repeated multiple times, and it will have the same result each time, 
without causing unintended side effects. 

Idempotent requests are important because they can be retried if a network error occurs or if the client is uncertain about whether a previous request was successfully processed. 
Here are some of the HTTP methods that are considered idempotent:

GET: 
The GET method is used to retrieve data from the server. 
It is idempotent because making the same GET request multiple times will not change the server's state or produce different results. 
It only retrieves data and does not modify it.

PUT: 
The PUT method is used to update or create a resource at a specific URI. 
When a PUT request is made with the same data multiple times, it will have the same effect as making the request once.

DELETE: The DELETE method is used to delete a resource. If you issue a DELETE request for a resource multiple times, the resource will be deleted the first time and have no effect on subsequent requests.

HEAD: 
The HEAD method is similar to GET, but it only retrieves the headers of the response, not the actual data. 
It is also idempotent because it doesn't change server state.

OPTIONS: 
The OPTIONS method is used to retrieve information about the communication options for the target resource. 
It is also idempotent because multiple requests for the same resource will yield the same information.

These idempotent HTTP methods are designed to be safe for repeated use and are crucial for the reliability of web applications and services, 
especially in scenarios where network errors, retries, and redundancies can occur. 
It's important to note that idempotence is a property of the HTTP method itself and does not guarantee that the application handling the 
request is entirely free of side effects. 
However, when used correctly and in accordance with HTTP standards, these methods should be idempotent.


