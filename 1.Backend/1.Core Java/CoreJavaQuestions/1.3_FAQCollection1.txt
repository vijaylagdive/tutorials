Q1. What is Collection in java? What is need of Collection?
Q2. What is need of Collection?
Q3. Collection vs Collections?
Q4. comparator vs comparable
Q5. What are the main differences between array and collection?
Q6. Interfaces used in Collection framework?
Q7. What is the difference between ArrayList and Vector?
Q8. What is the difference between List and Set?
Q9. What is the difference between Set and Map?
Q10. What is the difference between HashSet and HashMap?
Q11. Array vs ArrayList?
Q12. How to make Java ArrayList Read-Only?
Q13. How to remove duplicates from ArrayList?
Q14. ArrayList vd LinkedList?
Q15. How to sort ArrayList in descending order?
Q16. What is the difference between Iterator and ListIterator?
Q18. Synchronized vesrion of Collections?
---------------------------------------------------------------------------------------------------
Q1. What is Collection and Collection Framework in java? 
Ans:
Collection: 
If we want to represent a group of individual objects as a single entity then we should go for collection.
Collection Framework:
- Collection Framework is a combination of classes and interface, which is used to store and manipulate the data in the form of objects. 
- It provides various classes such as ArrayList, Vector, Stack, and HashSet, etc. and interfaces such as List, Queue, Set, etc. for this purpose.
- The Collection framework represents a unified architecture for storing and manipulating a group of objects. 
1. Interfaces and its implementations, i.e., classes 
2. Algorithm 
---------------------------------------------------------------------------------------------------

Q2. What is need of collection?
Ans:
- An array is indexed collection of fixed number of homogeneous data elements.
- The main advantage of array is we can represent multiple values with a single variable.
- So that reusability of code will be improved.

Limitations of Object type arrays:
1. Fixed in size: 
- Arrays are fixed in size. 
- So once we created an array with some size there is no chance of increasing or decreasing its size based on our requirements.
- Hence to use array compulsory we should know the size in advance which may not possible always.
2. Homogeneous: 
- Arrays can hold only homogeneous data types of elements.

No underline data structure
- Arrays concept is not implemented based on some standard data structure.
- Hence readymade method support is not available for every requirements.
- For that we have to write code explicitly. Which is complexity of programming.

To overcome above limitations of array Java has introduced Collections:
Collections are growable in nature i.e. based on our requirement we can increase or decrease the size.
Collection can hold both homogeneous and heterogeneous elements.
Every collection class is implemented based on some standard data structure.
Hence ready-made method support is available for every requirement.
Being a programmer we have to use this method and we are not responsible to provide implementation.
---------------------------------------------------------------------------------------------------
Q3. Collection vs Collections?
Ans:
The differences between the Collection and Collections are given below.
Collection:
1. The Collection is an interface which inherits Interable from java.util package.
2. The Collection interface provides the standard functionality of data structure to List, Set, and Queue. 
3. The Collection interface provides the methods that can be used for data structure whereas 

Collections:
Collections is a class in java.util package.
This class provides the static methods which can be used for various operation on a collection objects.
Example:
 public static void reverse(java.util.List<?>);
 public static void reverse(java.util.List<?>);
---------------------------------------------------------------------------------------------------
Q4. What is the difference between Comparable and Comparator?
Ans:
1. 
Comparable: It is found in java.lang package.	
Comparator: It is located in java.util package.

2. 
Comparable: meant for Default natural sorting order.
Comparator: meant for Customized natural sorting order.

3.
Comparable: Provides one method named compareTo().	
Comparator: This interface defines two methods. 1.compare() and 2.equals()

4.
Comparable: Provides only one sort of sequence.	
Comparator: The Comparator provides multiple sorts of sequences.
---------------------------------------------------------------------------------------------------
Q5. What are the main differences between array and collection?
Ans:
- Array and Collection are somewhat similar regarding storing the references of objects and manipulating the data, but they differ in many ways. 
- The main differences between the array and Collection are defined below:
1. 
Arrays are always of fixed size.
User can not increase or decrease the length of the array according to their requirement or at runtime, 
But In Collection, size can be changed dynamically as per need.

2.
Arrays can only store homogeneous or similar type objects, but in Collection, heterogeneous objects can be stored.

3.
Arrays cannot provide the ready-made methods for user requirements as sorting, searching, etc. but Collection includes readymade methods to use.
----------------------------------------------------------------
Q6. Interfaces used in Collection framework?
Ans:
1. Collection interface:
It is the primary interface and every collection must implement this interface.
syntax: public interface Collection<E> extends Iterable


2. List interface
List iterface extends the Collection interface and it is an ordered collection of objects. It contains duplicate elements. It also allows random access of elements.
syntax: public interface List<E> extends Collection<E>  


3. Set interface: 
Set interface is a collection which cannot contain duplicate elements.
syntax: public interface Set<E> extends Collection<E>  


4. Queue interface:
Defines queue data structure, which stores the elements in the form of FIFO.

5. Dequeue:
It is a double ended queue. It allows the insertion and removal of elements from both ends. 
It implements the properties of both stack and queue so it can perform LIFO stack and FIFO queue operations.

6. Map interface:
A map represents a key, value pair storage of elements.
Map interface does not implements the collection interface.
It can contain a unique key but can have duplicate elements.
There are 2 interfaces which implement map in java are Map and SortedMap

----------------------------------------------------------------
Q7. What is the difference between ArrayList and Vector?
ArrayList: ArrayList is not synchronized.
Vector: Vector is synchronized.

ArrayList: ArrayList is not a legacy class.
Vector:Vector is a legacy class.

ArrayList: ArrayList increases its size by 50% of the array size.
Vector: Vector increases its size by doubling the array size.

ArrayList:ArrayList is not ?thread-safe? as it is not synchronized.
Vector:Vector list is ?thread-safe? as it?s every method is synchronized.

----------------------------------------------------------------
Q8. What is the difference between List and Set?
Ans:
The List and Set both extend the collection interface. 
However, there are some differences between the both which are listed below.
1. The List can contain duplicate elements 
Set includes unique items.

2. The List is an ordered collection which maintains the insertion order.
Set is an unordered collection which does not preserve the insertion order.

3. The List interface contains a single legacy class which is Vector class.
Set interface does not have any legacy class.

4. The List interface can allow n number of null values.
Set interface only allows a single null value.

----------------------------------------------------------------
Q9. What is the difference between Set and Map?
Ans:
The differences between the Set and Map are given below.
1. Set contains values only whereas Map contains key and values both.
2. Set contains unique values whereas Map can contain unique Keys with duplicate values.
3. Set holds a single number of null value whereas Map can include a single null key with n number of null values.

----------------------------------------------------------------
Q10. What is the difference between HashSet and HashMap?
Ans:
The differences between the HashSet and HashMap are listed below.
1. HashSet contains only values whereas HashMap includes the entry (key, value). 
2. HashSet can be iterated, but HashMap needs to convert into Set to be iterated.
3. HashSet implements Set interface whereas HashMap implements the Map interface
4. HashSet cannot have any duplicate value whereas HashMap can contain duplicate values with unique keys.
5. HashSet contains the only single number of null value whereas HashMap can hold a single null key with n number of null values.
----------------------------------------------------------------
Q11.  Array vs ArrayList?
Ans:
1.
The Array is of fixed size, means we cannot resize the array as per need.
ArrayList is not of the fixed size we can change the size dynamically.

2.
Arrays are of the static type.
ArrayList is of dynamic size.

3.
Arrays can store primitive data types as well as objects.
ArrayList cannot store the primitive data types it can only store the objects.

4. length vs size()
Int [] array = new int[4];  
System.out.println("The size of the array is " + array.length);  

ArrayList<String> list=new ArrayList<String>();    
list.add("ankit");    
list.add("nippun");  
System.out.println(list.size());  
----------------------------------------------------------------

Q12. How to make Java ArrayList Read-Only?
Ans:
We can obtain java ArrayList Read-only by calling the Collections.unmodifiableCollection() method. 
When we define an ArrayList as Read-only then we cannot perform any modification in the collection through  add(), remove() or set() method.

----------------------------------------------------------------
Q13. How to remove duplicates from ArrayList?
Ans:
There are two ways to remove duplicates from the ArrayList.
Using HashSet: 
By using HashSet we can remove the duplicate element from the ArrayList, but it will not then preserve the insertion order.

Using LinkedHashSet: 
We can also maintain the insertion order by using LinkedHashSet instead of HashSet.

The Process to remove duplicate elements from ArrayList using the LinkedHashSet:
- Copy all the elements of ArrayList to LinkedHashSet.
- Empty the ArrayList using clear() method, which will remove all the elements from the list.
- Now copy all the elements of LinkedHashset to ArrayList.
-------------------------------------------------------------------------------------------------------
Q14. ArrayList vs LinkedList?																		  
Ans:																								  
Underlying Data Structure:                                                                            
ArrayList: Resizable or Growable Array	                                                              
LinkedList: Doubly linked list                                                                        

Time complexities                                                                                     
ArrayList:  Insertion -O(N), Deletion -O(N), Searching - O(N)                                         
LinkedList: Insertion -O(1), Deletion -O(1), Searching - O(N)                                         
 
Memory Usage	 																					  
ArrayList: Memory efficient. It only stores the object in the list.									  
LinkedList: Memory inefficient. It stores the object and the pointers to next and previous nodes.	  

Best and Worst for																					  
ArrayList: Best to use for the search operations. Worst for insertion deletion.						  
LinkedLists: Best to use for the insertion deletion operations. Worst for searching.				  
-------------------------------------------------------------------------------------------------------
Q15. How to sort ArrayList in descending order?
Ans:
List list = new ArrayList<>();  
     list.add(10);  
     list.add(50);  
     list.add(30);  
     list.add(60);  
     list.add(20);  
     list.add(90);  
       
     Iterator i = list.iterator();  
     System.out.println("printing the list....");  
     while(i.hasNext())  
     {  
         System.out.println(i.next());  
     }  
      
    Comparator cmp = Collections.reverseOrder();  
    Collections.sort(list,cmp);  
     System.out.println("printing list in descending order....");  
     Iterator i2 = list.iterator();  
     while(i2.hasNext())  
     {  
         System.out.println(i2.next());  
     }  

----------------------------------------------------------------
Q16. What is the difference between Iterator and ListIterator?
Ans:
Iterator:The Iterator traverses the elements in the forward direction only.
ListIterator: ListIterator traverses the elements in backward and forward directions both.

Iterator: The Iterator can be used in List, Set, and Queue.
ListIterator: ListIterator can be used in List only.

Iterator: The Iterator can only perform remove operation while traversing the collection.
ListIterator: ListIterator can perform ?add,? ?remove,? and ?set? operation while traversing the collection.
-------------------------------------------------
Q17. Difference between List and Set?
Ans: 
List: Duplicates are allowed and insertion order is preserved.
Set: Duplicates are not allowed and insertion order is not preserved.
-------------------------------------------------
Q18. Synchronized vesrion of Collections?
Ans:
Synchroized List
ArrayList l1 = new ArrayList();
List l = Collections.synchronizedList(l1);

Synchronized Set
public static Set synchrinizedSet(Set s1);

SynchronizedMap
public static Map synchrinizedMap(Map m1);
----------------------------------------------------------------






