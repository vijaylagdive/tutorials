
Collections in Java
-------------------------------------------------
Q1. What is collection?
Ans: If we want to represent a group of individual objects as a single entity then we should go for collection.
-------------------------------------------------
Q2. What is collection framework?
Ans:
The Collection framework represents a unified architecture for storing and manipulating a group of objects. 
It has:
1. Interfaces and its implementations, i.e., classes 
2. Algorithm 
-------------------------------------------------
Q3. What is need of collection??
Ans:
- An array is indexed collection of fixed number of homogeneous data elements.
- The main advantage of array is we can represent multiple values with a single variable.
- So that reusability of code will be improved.

Limitations of Object type arrays:
1. Fixed in size: 
- Arrays are fixed in size. 
- So once we created an array with some size there is no chance of increasing or decreasing its size based on our requirements.
- Hence to use array compulsory we should know the size in advance which may not possible always.
2. Homogeneous: 
- Arrays can hold only homogeneous data types of elements.

No underline data structure
- Arrays concept is not implemented based on some standard data structure.
- Hence readymade method support is not available for every requirements.
- For that we have to write code explicitly. Which is complexity of programming.

To overcome above limitations of array Java has introduced Collections:
Collections are growable in nature i.e. based on our requirement we can increase or decrease the size.
Collection can hold both homogeneous and heterogeneous elements.
Every collection class is implemented based on some standard data structure.
Hence ready-made method support is available for every requirement.
Being a programmer we have to use this method and we are not responsible to provide implementation.
---------------------------------------------------------------------------------------------------
Q4. Difference between Arrays and Collection?
Ans:
1. Size
Arrays: Arrays are fixed in size.
Collection: Collections are growable in nature.

2. Memory
Arrays: Wrt to memory and performance arrays are not recommended to use.
Collection: Wrt memory and performance collections are recommended to use.

3. Homogeneous elements
Arrays: Arrays can hold only homogeneous datatype elements.
Collection: Collections can hold both homogeneous and heterogeneous elements.

4. Underlying data structure
Arrays: There is no underlying data structure available for Array and hence ready-made method support is not available.
Collection: Every collection class is implemented based on some standard data structure. Hence ready-made method support is available for every requirement.

5. Allowed data types
Arrays: Array can hold both primitives and object types.
Collection: Collection can hold objects but not primitive data types.
-------------------------------------------------
Usually we can use Collections to hold and transfer Objects from one place to another place,
to provide support for this requirement every Collection already implements Serializable and clonable interface.


 ArrayList and Vector classes implements RandomAccess interface so that we can access any Random element with the same speed.
- Hence our frequent operation is retrieval operation then ArrayList is the best choice.
- Random Access: Present in java.util.package
- It doesn't contain any method and it is a Marker interface.


So:
l1 instanceOf Serializable //true
l2 instanceOf Cloneable//true
l1 instanceOf RandomAccess //true
l2 instanceOf RandomAccess// false

-------------------------------------------------