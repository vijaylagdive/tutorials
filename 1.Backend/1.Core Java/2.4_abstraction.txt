In Java, Data Abstraction means displaying only essential details and hiding the 
non-essential from the user. 

Real-Life Example:
Consider a real-life example of a man driving a car. 
The man only knows that pressing the accelerators will increase the speed of a car or applying brakes will stop the car, 
but he does not know how on pressing the accelerator the speed is actually increasing, 
he does not know about the inner mechanism of the car or the implementation of the accelerator, brakes, etc in the car. 
This is what abstraction is. 


There are two ways to achieve abstraction in java
1. Abstract class (0 to 100%)
2. Interface (100%)


1. Abstract classes in java:
- An abstract class is a class that is declared with an abstract keyword.
- An abstract method is a method that is declared without implementation.
- An abstract class may or may not have all abstract methods. Some of them can be concrete methods
- A method-defined abstract must always be redefined in the subclass, thus making overriding compulsory or making the subclass itself abstract.
- Any class that contains one or more abstract methods must also be declared with an abstract keyword.
- It cannot be instantiated. 
- Means there can be no object of an abstract class.
- That is, an abstract class can not be directly instantiated with the new operator.
- An abstract class can have parameterized constructors and the default constructor is always present in an abstract class.
- Abstract classes can have instance variables. 
Example:
abstract class Bike{  
  abstract void run();  
}  
class Honda4 extends Bike{  
void run()
{
   System.out.println("running safely");
}  
public static void main(String args[]){  
 Bike obj = new Honda4();  
 obj.run();  
}  
}  


When to use Abstract classes:
There are situations in which we will want to define a superclass that declares the structure of a given abstraction without providing a complete implementation of every method. 
Sometimes we will want to create a superclass that only defines a generalization form that will be shared by all of its subclasses, leaving it to each subclass to fill in the details.

Consider a classic “shape” example.
The base type is “shape” and each shape has a color, size, and so on. 
From this, specific types of shapes are derived(inherited)-circle, square, triangle, and so on — each of which may have additional characteristics and behaviors. 
For example, certain shapes can be flipped. 
Some behaviors may be different, such as when you want to calculate the area of a shape. 
The type hierarchy embodies both the similarities and differences between the shapes.

Ex:

Abstract class Shape 
{
	color: String;
	abstract area(): double
	abstract toString(): string 
	getColor(): string
}

Now 
Circle extends Shape 
{
radius: double
}

Rectangle extends Shape
{
length: double
width: double
}



Abstract classes vs Interface
Type of methods: 
Interface can have only abstract methods. 
Whereas, an abstract class can have abstract method and concrete methods.

Inheritance:
Interface supports multiple inheritance.
Abstract class doesn't support multiple inheritance.

Variables:
Interface has only static and final variables.
Abstract class can have final, non-final, static and non-static variables.

Implementation: 
Interface can't provide the implementation of abstract class.
Abstract class can provide the implementation of interface.


The interface keyword is used to declare interface.
The abstract keyword is used to declare abstract class.

An interface can extend another Java interface only.
An abstract class can extend another Java class and implement multiple Java interfaces.

An interface can be implemented using keyword "implements".
An abstract class can be extended using keyword "extends".

Members of a Java interface are public by default.
A Java abstract class can have class members like private, protected, etc.


Example:
public abstract class Shape{
	public abstract void draw();
	public void display(sysout("Hello"));
}

public interface Drawable{
	void draw();
}
------------------------------------------------------------------------------------------

interface Example:
interface Vehicle {
    void displayName();
}

class Test implements Vehicle {
    public void displayName() {
        System.out.println("Implemented interface " );
    }
    static public void main(String[] args) {
	   System.out.println("Iteration " );
	   Test t = new Test();
	   t.displayName();
    }
}


abstract class Example:
abstract class Vehicle {
    abstract void displayName();
}

class Test extends Vehicle {
    public void displayName() {
        System.out.println("Implemented interface " );
    }

    static public void main(String[] args) {
	   System.out.println("Iteration " );
	   Test t = new Test();
	   t.displayName();
    }
}


------------------------------------------------------------------------------------------





