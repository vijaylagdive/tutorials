Functional Interfaces:
1. Lambda Expressions
2. Functional Interfaces
3. How FI used to invoke lambda expressions.
4. Lambda Expressions for multi threading and Collections.
5. Anonymous inner classes vs Lambda Expressions.

Q1 What is Functional interfaces?
Ans:
- Functional interfaces provide target types for lambda expressions and method references. 
- Each functional interface has a single abstract method 
- That SAM is called as the functional method for that functional interface. 
- To that method the lambda expression's parameter and return types are matched or adapted. 
- Functional interfaces can provide a target type in multiple contexts, such as assignment context, method invocation, or cast context.
- Functional interface can contain any number of static and default methods but exact on abstract methods should be there.
.
Example of interfaces with single abstract methods.
Runnable=> run()
Comparable=> compareTo()
CompareTo=> compare()
ActionListener=> actionPerformed()
Callable=> call()
.

Functional interface annotations:
@FunctionalInterface
interface Interf {
	public void m1();
	default void m2() {
	}
	public static void m3() {		
	}
}

@FunctionalInterface annotation you can write. 
It is optional. It just make sure that developer doesnt make any mistake while writing Functional interface.

--------------------------------------------------------
Q2. What is lambda expressions?
Ans:
- Lambda Expression: Is nothing but function without name or anonymous functions.
- Lambda expression concept is applicable only for functional interfaces.
- Functional interfaces you can be implemented by using Lambda expressions.
- For lambda expression no seperate file is generated.
Example 1:
public void m1() {
	System.out.println("Hello")};
}
With lambda expressions:
() -> { System.out.println("Hello"); } or
() ->  System.out.println("Hello");


Example 2:
Lambda expressions with Functional interface.
interface Interf {
    public void m1();
}
class Test {
    public static void main(String[] args)
    {
        Interf i = ()-> System.out.println("Hello hi");
    }
}
-----------------------------------------------
Q3. How can we use lambda expressions with Runnable, Comparator interface?
Ans:
Without Lambda expressions:
class MyRunnable implements Runnable {
    public void run() {
        for(int i=0;i<5;i++) {
            System.out.println("Child Thread");
        }
    }
}

class Test {
    public static void main(String[] args) {
        MyRunnable r = new MyRunnable();
        Thread t = new Thread(r);
        t.start();
    
        for(int i=0;i<10;i++) {
            System.out.println("Main Thread");                    
        }
    }
}
.

With Lambda expressions:
class Test {
    public static void main(String[] args) {
        Runnable r = ()-> {
            for(int i=0; i<10; i++) {
                System.out.println("Main method it is!");
            }   
        };
        Thread t = new Thread(r);
        t.start();
        for(int i=0;i<10;i++) {
            System.out.println("Main Thread");                    
        }
    }
}

----------------------------------------------------------------
Without Lambda expressions:

import java.util.*;
class MyComparator implements Comparator<Integer> {
	public int compare(Integer i1, Integer i2) {
		if(i1 < i2) {
			return -1;
		} else if(i1>i2) {
			return 1;
		} else {
			return 0;
		}
	}
}

class Test {    
    public static void main(String[] args) {
        ArrayList l = new ArrayList();
        l.add(4);
        l.add(8);		
        l.add(5);
        l.add(2);
        l.add(9);	   
        l.add(0);
        l.add(43);
	System.out.println(l);
	Collections.sort(l,new MyComparator());
	System.out.println(l);
    }
}


With Lambda expressions:
import java.util.*;
class Test {    
    public static void main(String[] args) {
        ArrayList l = new ArrayList();
        l.add(4);
        l.add(8);		
        l.add(5);
        l.add(2);
        l.add(9);	   
        l.add(0);
        l.add(43);
	System.out.println(l);
	Comparator<Integer> c = (I1,I2) -> (I1 < I2) ? 1 : (I1 > I2) ? - 1 : 0;
	Collections.sort(l,c);
	System.out.println(l);
    }
}
----------------------------------------------------------------


