Q1. What is Jenkins?
Q2. What is Continuous Integration, Continuous Delivery, and Continuous Deployment?
Q3. What are the common use cases Jenkins is used for?
Q4. What is a Jenkins Pipeline?
Q5. What are the types of Jenkins pipelines?
Q6. Example of declarative pipeline?
Q7. What are the ways to trigger a Jenkins Job/Pipeline?
Q8. How is continuous integration achieved using Jenkins?
---------------------------------------------------------------------------------------------------
Q1. What is Jenkins?
Ans:
- Jenkins is a self-contained, open-source automation server that can be used to automate all sorts of tasks related to building, 
  testing, and delivering or deploying software. 
- Key benefit of jenkin is availabiity of plugins for various purposes.
- Jenkins can be installed through native system packages, Docker, or even run standalone by any machine with a Java Runtime Environment (JRE) installed.
.
command to run jenkin using java jdk.
java -jar .\jenkins.war
---------------------------------------------------------------------------------------------------
Q2. What is Continuous Integration, Continuous Delivery, and Continuous Deployment?
Ans:
Continuous Integration: 
A software development process where the changes made to project are integrated into the main code as and when a patch is ready.
So that the software will be always ready to be - built, tested, deployed, monitored - continuously.

Continuous Delivery: 
This is a Software Development Process.
In which the continuously integrated (CI) changes will be tested & deployed continuously into a specific environment.
It is done generally through a manual release process, after all the quality checks are successful

Continuous Deployment: 
- A Software Development practice where the continuously integrated (CI) changes are deployed automatically into the target environment 
  after all the quality checks are successful
.
Code -> Build -> Integrate -> Release -> Deploy
---------------------------------------------------------------------------------------------------
Q3. What are the common use cases Jenkins is used for?
Ans:
Jenkins being open-source automation can be used for any kind of software-based automation. 
Some of the common use-cases include but not limited to -
- Software build jobs
- Sanity/Smoke/CI/Regression test jobs
- Web/Data Scraping related jobs
- Code coverage measurement jobs
- General-purpose automation
- Reverse Engineering jobs
- Key Decoding jobs & many other jobs where software automation will be applicable.
---------------------------------------------------------------------------------------------------
Q4. What is a Jenkins Pipeline?
Ans:
- Jenkins Pipelines enable developers to create automated workflows for building, testing, and deploying their applications. 
- There are two types of pipelines in Jenkins: Scripted and Declarative. 
1. Sripted:
In Scripted Pipeline syntax, one or more node blocks do the core work throughout the entire Pipeline.

2. Declarative:
In Declarative Pipeline syntax, the pipeline block defines all the work done throughout your entire Pipeline.
-------------------------------------------------
Q5. What are the types of Jenkins pipelines?
Ans:
Jenkins Pipelines can be either - a Declarative pipeline or a Scripted Pipeline. 

1. Scripted:
In Scripted Pipeline syntax, one or more node blocks do the core work throughout the entire Pipeline.
Syntax:
Jenkinsfile (Scripted Pipeline)
node {  
    stage('Build') { 
        // 
    }
    stage('Test') { 
        // 
    }
    stage('Deploy') { 
        // 
    }
}

2. Declarative:
Declarative Pipeline is a more recent feature of Jenkins Pipeline which:
- Provides richer syntactical features over Scripted Pipeline syntax.
- It is designed to make writing and reading Pipeline code easier.
In Declarative Pipeline syntax, the pipeline block defines all the work done throughout your entire Pipeline.

Syntax:
pipeline {
    agent any //Execute this Pipeline or any of its stages, on any available agent.
    stages {
        stage('Build') { //Defines the "Build" stage.
            steps {
                // Perform some steps related to the "Build" stage.
            }
        }
        stage('Test') { //Defines the "Test" stage.
            steps {
                // 	Perform some steps related to the "Test" stage.
            }
        }
        stage('Deploy') { //Defines the "Deploy" stage.
            steps {
                // Perform some steps related to the "Deploy" stage.
            }
        }
    }
}
----------------------------------------------------------------------------------------------------
Q6. Example of declarative pipeline?
Ans:
pipeline { 
    agent any 
    options {
        skipStagesAfterUnstable()
    }
    stages {
        stage('Build') { 
            steps { 
                sh 'make' 
            }
        }
        stage('Test'){
            steps {
                sh 'make check'
                junit 'reports/**/*.xml' 
            }
        }
        stage('Deploy') {
            steps {
                sh 'make publish'
            }
        }
    }
}
---------------------------------------------------------------------------------------------------
Q7. What are the ways to trigger a Jenkins Job/Pipeline?
Ans:
There are many ways we can trigger a job in Jenkins. Some of the common ways are as below -
- Trigger an API (POST) request to the target job URL with the required data.
- Trigger it manually from the Jenkins web application.
- Trigger it using Jenkins CLI from the master/slave nodes.
- Time-based Scheduled Triggers like a cron job.
- Event-based Triggers like SCM Actions (Git Commit, Pull Requests), WebHooks, etc.
- Upstream/Downstream triggers by other Jenkins jobs.
---------------------------------------------------------------------------------------------------
Q8. How is continuous integration achieved using Jenkins?
Ans:
Continuous integration is a process where a developer’s code changes are constantly integrated into the main code and the same will be tested automatically and the results of the tests will decide whether the change is ready for deployment. In this process -

Developer Makes a change - commit/pull_request - in feature/dev branch
Source Control Management system generates appropriate events
SCM Specific Jenkins Plugins like Git/SVN will detect those events from the configured repositories and these events will be used to Trigger - build/dependent/test - jobs on Jenkins
After the Test/Dependent jobs are completed, the change/patch will be labeled according to the status of the test job
Based on the Status (i.e. readiness of a change to be merged with the main branch), the Continuous Delivery or Continuous Deployment strategy/tool will take it forward.
---------------------------------------------------------------------------------------------------
Q9. Explain Jenkins Multibranch Pipeline?
Ans:
- It is a pipeline job that can be configured to Create a set of Pipeline projects according to the detected branches in one SCM repository. 
- This can be used to configure pipelines for all branches of a single repository 
- For example: If we maintain different branches (i.e. production code branches) for different configurations like locales, currencies, countries, etc



---------------------------------------------------------------------------------------------------
Q4. What are the ways to install Jenkins?
Jenkins can be installed using -
- Docker (popular docker images for Jenkins is available for different platforms like Unix/Mac/Windows in the docker registry)
- Kubernetes (available as a helm chart and can be installed on our Kubernetes clusters)
- Standalone (on any machine with a Java Runtime Environment installed)
- Native System Package Manager like - apt (Linux), brew (Mac), etc.
-------------------------------------------------
Q5. What is a Jenkins job?
Ans:
A Job/Project is the fundamental unit of a logical work (like a software build, an automation task, test execution, etc) 
using the Jenkins automation server and other required plugins, configurations & infrastructures.

Jobs can be of different types like - a freestyle project, a multi-configuration project, a pipeline project, a multi-branch project, etc.
-------------------------------------------------


-------------------------------------------------
Q9. How do you store credentials in Jenkins securely?
Ans:
Credentials can be stored securely in Jenkins using the Credentials plugin, which stores different types of credentials.
like - Username with a password, SSH username with the private key, AWS Credentials, Jenkins Build Token, Secret File/Text, X509 & other certificates, Vault related credentials securely with proper encryption & decryption as and when required.
-------------------------------------------------
Q10. How can we stop a scheduled job from being executed temporarily?
Ans:
Disable the job from the job details page to temporarily stop all scheduled executions & other factors/events from triggering the job and enable it back to resume the job schedules/triggers. 
If a job is not required permanently, we can delete the job from the jobs list view page.
-------------------------------------------------



10. What is the Blue Ocean?
Blue Ocean is the redefined user experience for Jenkins. Designed from the ground up for Jenkins Pipeline, it is still compatible with freestyle jobs, Blue Ocean reduces clutter and increases clarity. Blue Ocean’s main features include -

Sophisticated visualizations of continuous delivery (CD) Pipelines, allowing for fast and intuitive comprehension of your Pipeline’s status.
Pipeline editor - makes the creation of Pipelines approachable by guiding the user through an intuitive and visual process to create a Pipeline.
Personalization to suit the role-based needs of each member of the team.
Pinpoint precision when intervention is needed and/or issues arise. Blue Ocean shows where in the pipeline attention is needed, facilitating exception handling and increasing productivity.
Native integration for branch and pull requests, enables maximum developer productivity when collaborating on code with others in GitHub, Bitbucket, etc.
--------------------------------------------------------------------------------------------------




