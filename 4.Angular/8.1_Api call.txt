Q1. What is HttpClient and its benefits?

Most of the Front-end applications communicate with backend services over HTTP protocol using either XMLHttpRequest interface or the fetch() API. 
Angular provides a simplified client HTTP API known as HttpClient which is based on top of XMLHttpRequest interface. 

This client is avaialble from 
@angular/common/http package. 
You can import in your root module as below,
import { HttpClientModule } from '@angular/common/http';

The major advantages of HttpClient can be listed as below,

Contains testability features
Provides typed request and response objects
Intercept request and response
Supports Observalbe APIs
Supports streamlined error handling.

---------------------------------------------------------------------------------------------------

Q2. Explain on how to use HttpClient with an example?
Below are the steps need to be followed for the usage of HttpClient.
1. Import HttpClient into root module:
import { HttpClientModule } from '@angular/common/http';
@NgModule({
  imports: [
    BrowserModule,
    // import HttpClientModule after BrowserModule.
    HttpClientModule,
  ],
  ......
  })
 export class AppModule {}


2. Inject the HttpClient into the application: 
Let's create a userProfileService(userprofile.service.ts) as an example. 
It also defines get method of HttpClient
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

const userProfileUrl: string = 'assets/data/profile.json';

@Injectable()
export class UserProfileService {
  constructor(private http: HttpClient) { }

  getUserProfile() {
    return this.http.get(this.userProfileUrl);
  }
}


3. Create a component for subscribing service: 
Let's create a component called UserProfileComponent(userprofile.component.ts).
This will inject UserProfileService and invokes the service method,

fetchUserProfile() {
  this.userProfileService.getUserProfile()
    .subscribe((data: User) => this.user = {
        id: data['userId'],
        name: data['firstName'],
        city:  data['city']
    });
}

Since the above service method returns an Observable which needs to be subscribed in the component.
---------------------------------------------------------------------------------------------------

Q3 What are HTTP interceptor?
Ans: 
Http Interceptors are part of @angular/common/http, which inspect and transform HTTP requests from your application to the server 
and vice-versa on HTTP responses. 

These interceptors can perform a variety of implicit tasks, from authentication to logging.

The syntax of HttpInterceptor interface looks like as below,

interface HttpInterceptor {
  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>
}


You can use interceptors by declaring a service class that implements the intercept() method of the HttpInterceptor interface.

@Injectable()
export class MyInterceptor implements HttpInterceptor {
    constructor() {}
    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
        ...
    }
}



After that you can use it in your module,

@NgModule({
    ...
    providers: [
        {
            provide: HTTP_INTERCEPTORS,
            useClass: MyInterceptor,
            multi: true
        }
    ]
    ...
})
export class AppModule {}
---------------------------------------------------------------------------------------------------
Q4. What are the applications or uses of HTTP interceptors?
The HTTP Interceptors can be used for different variety of tasks,

Authentication
Logging
Caching
Fake backend
URL transformation
Modifying headers

---------------------------------------------------------------------------------------------------
Q5. Is multiple interceptors supported in Angular?
Yes, Angular supports multiple interceptors at a time. You could define multiple interceptors in providers property:

providers: [
  { provide: HTTP_INTERCEPTORS, useClass: MyFirstInterceptor, multi: true },
  { provide: HTTP_INTERCEPTORS, useClass: MySecondInterceptor, multi: true }
],
The interceptors will be called in the order in which they were provided. i.e, MyFirstInterceptor will be called first in the above interceptors configuration.

---------------------------------------------------------------------------------------------------



















