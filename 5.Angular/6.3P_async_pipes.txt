Q7. What is async pipe?
Ans: 
The async pipe subscribes to an Observable or Promise that returns the latest values and displays on screen. 
When a new value is emitted, the async pipe marks the component to be checked for changes. 
When the component gets destroyed, the async pipe unsubscribes automatically to avoid potential memory leaks. 
When the reference of the expression changes, the async pipe automatically unsubscribes from the old Observable or Promise and subscribes to the new one.

e.g. 
Let's take a time observable which continuously updates the view for every 2 seconds with the current time.

@Component({
  selector: 'async-observable-pipe',
  template: `<div>
		<code>observable|async</code>:
       		Time: {{ time | async }}
	    </div>`
})

export class AsyncObservablePipeComponent {
  time = new Observable(observer =>
    setInterval(() => observer.next(new Date().toString()), 2000)
  );
}
---------------------------------------------------------------------------------------------------
