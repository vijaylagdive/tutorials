HTTP interceptors:

What are the interceptors?
A feature in angular that provides great way to intercept outgoing requests or incoming responses.
Interceptors are useful when we need to 
- Ensure the outgoing request is HTTPS instead of HTTP.
- Set an authorization header on each request.
- We can create a global error catch in case HTTP request fails.
- We can create mock response for our application to test.

In components 
  const url = 'https://jsonplaceholder.typicode.com/posts/1';
  this.players = this.http.get(url, {observe: 'body'});

Create a interecptor service using

ng g s MyInterceptor

@Injectable()
export class I1 implements HttpInterceptor {
  private token = '';

  intercept(httpRequest: HttpRequest<any>, httpHandler: HttpHandler): Observable<HttpEvent<any>> {
    this.token = 'bxdesddsdsds';
    if (this.token) {
      const tokenizedReq = httpRequest.clone({ headers: httpRequest.headers.set('Authorization', 'Bearer ' + this.token) });
      return httpHandle.handle(tokenizedReq);
    }
    return httpHandle.handle(req);
    }
  }


In module

import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { I1 } from './my-interceptor.service';

  providers: [
    {
        provide: HTTP_INTERCEPTORS,
        useClass: I1,
        multi: true
    }
],

---------------------------------------------------------------------------------------------------

Q3 What are HTTP interceptor?
Ans: 
Http Interceptors are part of @angular/common/http, which inspect and transform HTTP requests from your application to the server 
and vice-versa on HTTP responses. 

These interceptors can perform a variety of implicit tasks, from authentication to logging.

The syntax of HttpInterceptor interface looks like as below,

interface HttpInterceptor {
  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>
}


You can use interceptors by declaring a service class that implements the intercept() method of the HttpInterceptor interface.

@Injectable()
export class MyInterceptor implements HttpInterceptor {
    constructor() {}
    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
        ...
    }
}



After that you can use it in your module,

@NgModule({
    ...
    providers: [
        {
            provide: HTTP_INTERCEPTORS,
            useClass: MyInterceptor,
            multi: true
        }
    ]
    ...
})
export class AppModule {}
---------------------------------------------------------------------------------------------------
Q4. What are the applications or uses of HTTP interceptors?
The HTTP Interceptors can be used for different variety of tasks,

Authentication
Logging
Caching
Fake backend
URL transformation
Modifying headers

---------------------------------------------------------------------------------------------------
Q5. Is multiple interceptors supported in Angular?
Yes, Angular supports multiple interceptors at a time. You could define multiple interceptors in providers property:

providers: [
  { provide: HTTP_INTERCEPTORS, useClass: MyFirstInterceptor, multi: true },
  { provide: HTTP_INTERCEPTORS, useClass: MySecondInterceptor, multi: true }
],
The interceptors will be called in the order in which they were provided. i.e, MyFirstInterceptor will be called first in the above interceptors configuration.

---------------------------------------------------------------------------------------------------


