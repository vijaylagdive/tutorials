Q1. What is Sass?
Q2. Why to use Sass?
Q3. @import or importing file?
Q4. Sass extend?
Q5. What is Sass Mixins?
Q6. Passing variables to mixins?
---------------------------------------------------------------------------------------------------
Q1. What is Sass?
Ans: 
Sass is a css pre-processor.
Sass stands for Syntactically Awesome Stylesheet.
Sass is an extension to css.
Sass reduces repetition of css and thus saves time.
Sass file has scss extension.
---------------------------------------------------------------------------------------------------
Q2. Why to use Sass?
Ans:
- Stylesheets are getting larger, complex and harder to maintain. This is where css pre-processors can help.
- Sass provides features that are not existing in css like 
1.@imports,
2.@extend: inheritance built-in functions and other stuffs.
3.@mixins @include
4.nested rules, 
5.variables
---------------------------------------------------------------------------------------------------
Q3. @import or importing file?
Ans:
@import or importing file?
Sass supports @import directive.
The @import directive allows you to include the content of one file in another.

for example:

reset.scss
html,
body,
ul,
ol {
  margin: 0;
  padding: 0;
}


standard.scss
@import "reset";

body {
  font-family: Helvetica, sans-serif;
  font-size: 18px;
  color: red;
}


so when the standard.css file is transpiled, the css will look like this.
html, body, ul, ol {
  margin: 0;
  padding: 0;
}

body {
  font-family: Helvetica, sans-serif;
  font-size: 18px;
  color: red;
}
---------------------------------------------------------------------------------------------------
Q4. Sass extend?
Ans:
The @extend directive lets you share a set of CSS properties.

The @extend directive is useful if you have almost identically styled elements that only differ in some small details.

The following Sass example first creates a basic style for buttons (this style will be used for most buttons). 
Then, we create one style for a "Report" button and one style for a "Submit" button. 
Both "Report" and "Submit" button inherit all the CSS properties from the .button-basic class, through the @extend directive. 
In addition, they have their own colors defined:

.button-basic  {
  border: none;
  padding: 15px 30px;
  text-align: center;
  font-size: 16px;
  cursor: pointer;
}

.button-report  {
  @extend .button-basic;
  background-color: red;
}

.button-submit  {
  @extend .button-basic;
  background-color: green;
  color: white;
}


After compilation, the CSS will look like this:

CSS Output:
.button-basic, .button-report, .button-submit {
  border: none;
  padding: 15px 30px;
  text-align: center;
  font-size: 16px;
  cursor: pointer;
}

.button-report  {
  background-color: red;
}

.button-submit  {
  background-color: green;
  color: white;
}

By using the @extend directive, you do not need to specify several classes for an element in your HTML code, 
like this: <button class="button-basic button-report">Report this</button>. 
You just need to specify .button-report to get both sets of styles.

The @extend directive helps keep your Sass code very DRY. 
(Don't Repeat Yourself)
---------------------------------------------------------------------------------------------------
Q5. What is Sass Mixins?
Ans:
The @mixins directive lets you create css code that can be used throught the application.
The @include directive allows to use the mixins

e.g.
@mixin important-text {
  color: red;
  font-size: 25px;
  font-weight: bold;
  border: 1px solid blue;
}


using mixins?

.danger {
  @include important-text;
  background-color: green;
}

The sass transpiler will convert the above to normal CSS:
.danger {
  color: red;
  font-size: 25px;
  font-weight: bold;
  border: 1px solid blue;
  background-color: green;
}

A mixin can include other mixins
@mixin special-text {
  @include important-text;
  @include link;
  @include special-border;
}

---------------------------------------------------------------------------------------------------
Q6. Passing variables to mixins?
Ans:
Mixins accept arguments. Here is how to define a mixin with arguments:
/* Define mixin with two arguments */

@mixin bordered($color, $width) {
  border: $width solid $color;
}

.myArticle {
  @include bordered(blue, 1px);  // Call mixin with two values
}

.myNotes {
  @include bordered(red, 2px); // Call mixin with two values
}

.myArticle {
  border: 1px solid blue;
}

.myNotes {
  border: 2px solid red;
}

Arguments are set as variables and then used as the values (color and width) of the border property.

After compilation, the CSS will look like this:
---------------------------------------------------------------------------------------------------
Q6. Passing variables to mixins?
Ans:
Default values for mixins?

@mixin bordered($color: blue, $width: 1px) {
  border: $width solid $color;
}


.myTips {
  @include bordered($color: orange);
}

---------------------------------------------------------------------------------------------------
